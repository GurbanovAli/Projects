/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*******************************!*\
  !*** ./src/scripts/script.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("const controlBlock = `<div class=\"control-block\">\r\n    <div class=\"control-block_buttons\">\r\n    <label class=\"change-color\">\r\n     <input type=\"color\" value=\"#ffffff\">\r\n     <div class=\"circle\"></div>\r\n    </label>\r\n      <img id=\"load-bg\" src=\"src/icons/reload.svg\" width=\"45\" height=\"45\">\r\n      <select class=\"control-block_languages\">\r\n        <option value=\"en\">EN</option>\r\n        <option value=\"ru\">RU</option>\r\n        <option value=\"be\">BE</option>\r\n      </select>\r\n      <div class=\"control-block_choose-degrees\">\r\n        <div class=\"labels-for-degrees-inputs\">\r\n          <input id=\"celsius\" type=\"radio\" name=\"degrees\" value=\"c\" checked>\r\n          <label for=\"celsius\">\r\n            <div class=\"celsius\">\r\n              <p>°C</p>\r\n            </div>\r\n          </label>\r\n          <input id=\"fahrenheit\" type=\"radio\" name=\"degrees\" value=\"f\">\r\n          <label for=\"fahrenheit\">\r\n            <div class=\"fahrenheit\">\r\n              <p>°F</p>\r\n            </div>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"control-block_search\">\r\n      <div class=\"search-input\">\r\n        <input id=\"search-input\" type=\"text\">\r\n        <img id=\"micro\" src=\"src/icons/microfon.png\" width=\"14.5\" height=\"17\" alt=\"micro\">\r\n      </div>\r\n      <div id=\"search-btn\" class=\"search-btn\">\r\n        <p>SEARCH</p>\r\n      </div>\r\n    </div>\r\n  </div>`;\r\n\r\n\r\nconst weatherFor3DaysBlock = `<div class=\"weather-for-3-days\">\r\n             <div class=\"weather-for-3-days_element weather-for-3-days_element-1\">\r\n               <p></p>\r\n               <div class=\"temperature-next-days\">\r\n                 <p></p>\r\n                 <img src=\"\" alt=\"\">\r\n               </div>\r\n             </div>\r\n             <div class=\"weather-for-3-days_element weather-for-3-days_element-2\">\r\n               <p></p>\r\n               <div class=\"temperature-next-days\">\r\n                 <p></p>\r\n                 <img src=\"\" alt=\"\">\r\n               </div>\r\n             </div>\r\n             <div class=\"weather-for-3-days_element weather-for-3-days_element-3\">\r\n               <p></p>\r\n               <div class=\"temperature-next-days\">\r\n                 <p></p>\r\n                 <img src=\"\" alt=\"\">\r\n               </div>\r\n             </div>\r\n           </div>`;\r\n\r\n\r\nconst weatherForTodayBlock = `<div class=\"weather-for-today\">\r\n                              <h2></h2>\r\n                              <h4></h4>\r\n                              <div class=\"weather-for-today_weather-description-block\">\r\n                                <div class=\"temperature\">\r\n                                  <p></p>\r\n                                  <img src=\"\">\r\n                                </div>\r\n                                <div class=\"weather-description\">\r\n                                  <div class=\"weather-description-params\">\r\n                                    <p class=\"description\"></p>\r\n                                    <p class=\"feels-like-temp\"></p>\r\n                                    <p class=\"wind-speed\"></p>\r\n                                    <p class=\"humidity\"></p>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>`;\r\n\r\nconst mapBlock = `<div class=\"map-container\">\r\n         <div id=\"map\"></div>\r\n         <p class=\"lon\">Longitude:</p>\r\n         <p class=\"lat\">Latitude:</p>\r\n       </div>`;\r\n\r\n\r\nconst fullCountryNames = {\r\n   BD: 'Bangladesh',\r\n   BE: 'Belgium',\r\n   BF: 'Burkina Faso',\r\n   BG: 'Bulgaria',\r\n   BA: 'Bosnia and Herzegovina',\r\n   BB: 'Barbados',\r\n   WF: 'Wallis and Futuna',\r\n   BL: 'Saint Barthelemy',\r\n   BM: 'Bermuda',\r\n   BN: 'Brunei',\r\n   BO: 'Bolivia',\r\n   BH: 'Bahrain',\r\n   BI: 'Burundi',\r\n   BJ: 'Benin',\r\n   BT: 'Bhutan',\r\n   JM: 'Jamaica',\r\n   BV: 'Bouvet Island',\r\n   BW: 'Botswana',\r\n   WS: 'Samoa',\r\n   BQ: 'Bonaire, Saint Eustatius and Saba ',\r\n   BR: 'Brazil',\r\n   BS: 'Bahamas',\r\n   JE: 'Jersey',\r\n   BY: 'Belarus',\r\n   BZ: 'Belize',\r\n   RU: 'Russia',\r\n   RW: 'Rwanda',\r\n   RS: 'Serbia',\r\n   TL: 'East Timor',\r\n   RE: 'Reunion',\r\n   TM: 'Turkmenistan',\r\n   TJ: 'Tajikistan',\r\n   RO: 'Romania',\r\n   TK: 'Tokelau',\r\n   GW: 'Guinea-Bissau',\r\n   GU: 'Guam',\r\n   GT: 'Guatemala',\r\n   GS: 'South Georgia and the South Sandwich Islands',\r\n   GR: 'Greece',\r\n   GQ: 'Equatorial Guinea',\r\n   GP: 'Guadeloupe',\r\n   JP: 'Japan',\r\n   GY: 'Guyana',\r\n   GG: 'Guernsey',\r\n   GF: 'French Guiana',\r\n   GE: 'Georgia',\r\n   GD: 'Grenada',\r\n   GB: 'United Kingdom',\r\n   GA: 'Gabon',\r\n   SV: 'El Salvador',\r\n   GN: 'Guinea',\r\n   GM: 'Gambia',\r\n   GL: 'Greenland',\r\n   GI: 'Gibraltar',\r\n   GH: 'Ghana',\r\n   OM: 'Oman',\r\n   TN: 'Tunisia',\r\n   JO: 'Jordan',\r\n   HR: 'Croatia',\r\n   HT: 'Haiti',\r\n   HU: 'Hungary',\r\n   HK: 'Hong Kong',\r\n   HN: 'Honduras',\r\n   HM: 'Heard Island and McDonald Islands',\r\n   VE: 'Venezuela',\r\n   PR: 'Puerto Rico',\r\n   PS: 'Palestinian Territory',\r\n   PW: 'Palau',\r\n   PT: 'Portugal',\r\n   SJ: 'Svalbard and Jan Mayen',\r\n   PY: 'Paraguay',\r\n   IQ: 'Iraq',\r\n   PA: 'Panama',\r\n   PF: 'French Polynesia',\r\n   PG: 'Papua New Guinea',\r\n   PE: 'Peru',\r\n   PK: 'Pakistan',\r\n   PH: 'Philippines',\r\n   PN: 'Pitcairn',\r\n   PL: 'Poland',\r\n   PM: 'Saint Pierre and Miquelon',\r\n   ZM: 'Zambia',\r\n   EH: 'Western Sahara',\r\n   EE: 'Estonia',\r\n   EG: 'Egypt',\r\n   ZA: 'South Africa',\r\n   EC: 'Ecuador',\r\n   IT: 'Italy',\r\n   VN: 'Vietnam',\r\n   SB: 'Solomon Islands',\r\n   ET: 'Ethiopia',\r\n   SO: 'Somalia',\r\n   ZW: 'Zimbabwe',\r\n   SA: 'Saudi Arabia',\r\n   ES: 'Spain',\r\n   ER: 'Eritrea',\r\n   ME: 'Montenegro',\r\n   MD: 'Moldova',\r\n   MG: 'Madagascar',\r\n   MF: 'Saint Martin',\r\n   MA: 'Morocco',\r\n   MC: 'Monaco',\r\n   UZ: 'Uzbekistan',\r\n   MM: 'Myanmar',\r\n   ML: 'Mali',\r\n   MO: 'Macao',\r\n   MN: 'Mongolia',\r\n   MH: 'Marshall Islands',\r\n   MK: 'Macedonia',\r\n   MU: 'Mauritius',\r\n   MT: 'Malta',\r\n   MW: 'Malawi',\r\n   MV: 'Maldives',\r\n   MQ: 'Martinique',\r\n   MP: 'Northern Mariana Islands',\r\n   MS: 'Montserrat',\r\n   MR: 'Mauritania',\r\n   IM: 'Isle of Man',\r\n   UG: 'Uganda',\r\n   TZ: 'Tanzania',\r\n   MY: 'Malaysia',\r\n   MX: 'Mexico',\r\n   IL: 'Israel',\r\n   FR: 'France',\r\n   IO: 'British Indian Ocean Territory',\r\n   SH: 'Saint Helena',\r\n   FI: 'Finland',\r\n   FJ: 'Fiji',\r\n   FK: 'Falkland Islands',\r\n   FM: 'Micronesia',\r\n   FO: 'Faroe Islands',\r\n   NI: 'Nicaragua',\r\n   NL: 'Netherlands',\r\n   NO: 'Norway',\r\n   NA: 'Namibia',\r\n   VU: 'Vanuatu',\r\n   NC: 'New Caledonia',\r\n   NE: 'Niger',\r\n   NF: 'Norfolk Island',\r\n   NG: 'Nigeria',\r\n   NZ: 'New Zealand',\r\n   NP: 'Nepal',\r\n   NR: 'Nauru',\r\n   NU: 'Niue',\r\n   CK: 'Cook Islands',\r\n   XK: 'Kosovo',\r\n   CI: 'Ivory Coast',\r\n   CH: 'Switzerland',\r\n   CO: 'Colombia',\r\n   CN: 'China',\r\n   CM: 'Cameroon',\r\n   CL: 'Chile',\r\n   CC: 'Cocos Islands',\r\n   CA: 'Canada',\r\n   CG: 'Republic of the Congo',\r\n   CF: 'Central African Republic',\r\n   CD: 'Democratic Republic of the Congo',\r\n   CZ: 'Czech Republic',\r\n   CY: 'Cyprus',\r\n   CX: 'Christmas Island',\r\n   CR: 'Costa Rica',\r\n   CW: 'Curacao',\r\n   CV: 'Cape Verde',\r\n   CU: 'Cuba',\r\n   SZ: 'Swaziland',\r\n   SY: 'Syria',\r\n   SX: 'Sint Maarten',\r\n   KG: 'Kyrgyzstan',\r\n   KE: 'Kenya',\r\n   SS: 'South Sudan',\r\n   SR: 'Suriname',\r\n   KI: 'Kiribati',\r\n   KH: 'Cambodia',\r\n   KN: 'Saint Kitts and Nevis',\r\n   KM: 'Comoros',\r\n   ST: 'Sao Tome and Principe',\r\n   SK: 'Slovakia',\r\n   KR: 'South Korea',\r\n   SI: 'Slovenia',\r\n   KP: 'North Korea',\r\n   KW: 'Kuwait',\r\n   SN: 'Senegal',\r\n   SM: 'San Marino',\r\n   SL: 'Sierra Leone',\r\n   SC: 'Seychelles',\r\n   KZ: 'Kazakhstan',\r\n   KY: 'Cayman Islands',\r\n   SG: 'Singapore',\r\n   SE: 'Sweden',\r\n   SD: 'Sudan',\r\n   DO: 'Dominican Republic',\r\n   DM: 'Dominica',\r\n   DJ: 'Djibouti',\r\n   DK: 'Denmark',\r\n   VG: 'British Virgin Islands',\r\n   DE: 'Germany',\r\n   YE: 'Yemen',\r\n   DZ: 'Algeria',\r\n   US: 'United States',\r\n   UY: 'Uruguay',\r\n   YT: 'Mayotte',\r\n   UM: 'United States Minor Outlying Islands',\r\n   LB: 'Lebanon',\r\n   LC: 'Saint Lucia',\r\n   LA: 'Laos',\r\n   TV: 'Tuvalu',\r\n   TW: 'Taiwan',\r\n   TT: 'Trinidad and Tobago',\r\n   TR: 'Turkey',\r\n   LK: 'Sri Lanka',\r\n   LI: 'Liechtenstein',\r\n   LV: 'Latvia',\r\n   TO: 'Tonga',\r\n   LT: 'Lithuania',\r\n   LU: 'Luxembourg',\r\n   LR: 'Liberia',\r\n   LS: 'Lesotho',\r\n   TH: 'Thailand',\r\n   TF: 'French Southern Territories',\r\n   TG: 'Togo',\r\n   TD: 'Chad',\r\n   TC: 'Turks and Caicos Islands',\r\n   LY: 'Libya',\r\n   VA: 'Vatican',\r\n   VC: 'Saint Vincent and the Grenadines',\r\n   AE: 'United Arab Emirates',\r\n   AD: 'Andorra',\r\n   AG: 'Antigua and Barbuda',\r\n   AF: 'Afghanistan',\r\n   AI: 'Anguilla',\r\n   VI: 'U.S. Virgin Islands',\r\n   IS: 'Iceland',\r\n   IR: 'Iran',\r\n   AM: 'Armenia',\r\n   AL: 'Albania',\r\n   AO: 'Angola',\r\n   AQ: 'Antarctica',\r\n   AS: 'American Samoa',\r\n   AR: 'Argentina',\r\n   AU: 'Australia',\r\n   AT: 'Austria',\r\n   AW: 'Aruba',\r\n   IN: 'India',\r\n   AX: 'Aland Islands',\r\n   AZ: 'Azerbaijan',\r\n   IE: 'Ireland',\r\n   ID: 'Indonesia',\r\n   UA: 'Ukraine',\r\n   QA: 'Qatar',\r\n   MZ: 'Mozambique',\r\n};\r\n\r\nconst weatherArrayEng = ['THUNDERSTORM WITH LIGHT RAIN', 'THUNDERSTORM WITH RAIN', 'THUNDERSTORM WITH HEAVY RAIN', 'LIGHT THUNDERSTORM', 'THUNDERSTORM', 'HEAVY THUNDERSTORM', 'RAGGED THUNDERSTORM', 'THUNDERSTORM WITH LIGHT DRIZZLE', 'THUNDERSTORM WITH DRIZZLE', 'THUNDERSTORM WITH HEAVY DRIZZLE', 'LIGHT INTENSITY DRIZZLE', 'DRIZZLE', 'HEAVY INTENSITY DRIZZLE', 'LIGHT INTENSITY DRIZZLE RAIN', 'DRIZZLE RAIN', 'HEAVY INTENSITY DRIZZLE RAIN', 'SHOWER RAIN AND DRIZZLE', 'HEAVY SHOWER RAIN AND DRIZZLE', 'SHOWER DRIZZLE', 'LIGHT RAIN', 'MODERATE RAIN', 'HEAVY INTENSITY RAIN', 'VERY HEAVY RAIN', 'EXTREME RAIN', 'FREEZING RAIN', 'LIGHT INTENSITY SHOWER RAIN', 'SHOWER RAIN', 'HEAVY INTENSITY SHOWER RAIN', 'RAGGED SHOWER RAIN', 'LIGHT SNOW', 'SNOW', 'HEAVY SNOW', 'SLEET', 'LIGHT SHOWER SLEET', 'SHOWER SLEET', 'LIGHT RAIN AND SNOW', 'RAIN AND SNOW', 'LIGHT SHOWER SNOW', 'SHOWER SNOW', 'HEAVY SHOWER SNOW', 'MIST', 'SMOKE', 'HAZE', 'SAND/ DUST WHIRLS', 'FOG', 'SAND', 'DUST', 'VOLCANIC ASH', 'SQUALLS', 'TORNADO', 'CLEAR SKY', 'FEW CLOUDS', 'SCATTERED CLOUDS', 'BROKEN CLOUDS', 'OVERCAST CLOUDS'];\r\nconst weatherArrayRu = ['ГРОЗА С ЛЕГКИМ ДОЖДЕМ', 'ГРОЗА С ДОЖДЕМ', 'ГРОЗА С СИЛЬНЫМ ДОЖДЕМ', 'ЛЕГКАЯ ГРОЗА', 'ГРОЗА', 'СИЛЬНАЯ ГРОЗА', 'РВАНАЯ ГРОЗА', 'ГРОЗА С МЕЛКИМ ДОЖДЕМ', 'ГРОЗА С МЕЛКИМ ДОЖДЕМ', 'ГРОЗА С МЕЛКИМ ДОЖДЕМ', 'ГРОЗА С СИЛЬНЫМ ДОЖДЕМ', 'МЕЛКИЙ ДОЖДЬ', 'СИЛЬНЫЙ ДОЖДЬ', 'СИЛЬНЫЙ ДОЖДЬ', 'СИЛЬНЫЙ ДОЖДЬ', 'СИЛЬНЫЙ ДОЖДЬ', 'СИЛЬНЫЙ ДОЖДЬ', 'СИЛЬНЫЙ ДОЖДЬ', 'ДОЖДЬ И МОРОСЬ', 'ДОЖДЬ С ДОЖДЕМ', ' НЕБОЛЬШОЙ ДОЖДЬ', 'УМЕРЕННЫЙ ДОЖДЬ', 'СИЛЬНЫЙ ДОЖДЬ', 'ОЧЕНЬ СИЛЬНЫЙ ДОЖДЬ', 'ЭКСТРЕМАЛЬНЫЙ ДОЖДЬ', 'ЛЕДЯНОЙ ДОЖДЬ', 'ЛИВЕНЬ С ИНТЕНСИВНЫМ ЛИВНЕМ', 'ЛИВЕНЬ С ИНТЕНСИВНЫМ ЛИВНЕМ', 'ДОЖДЬ С ИНТЕНСИВНЫМ ЛИВНЕМ', 'РВАНЫЙ ЛИВЕНЬ', 'ЛЕГКИЙ СНЕГ', 'СНЕГ', 'СИЛЬНЫЙ СНЕГ', 'МОКРЫЙ СНЕГ', 'ДОЖДЬ СО СНЕГОМ', 'ДОЖДЬ СО СНЕГОМ', 'ЛЕГКИЙ ДОЖДЬ СО СНЕГОМ', 'ДОЖДЬ СО СНЕГОМ', 'ДОЖДЬ СО СНЕГОМ', 'СИЛЬНЫЙ ДОЖДЬ СО СНЕГОМ', 'ТУМАН', 'ДЫМ', 'ДЫМКА', 'ПЕСЧАНЫЕ ВИХРИ', 'ТУМАН', 'ПЕСОК', 'ПЫЛЬ', 'ВУЛКАНИЧЕСКИЙ ПЕПЕЛ', 'ШКВАЛЫ', 'ТОРНАДО', 'ЧИСТОЕ НЕБО', 'МАЛО ОБЛАКОВ', 'РАССЕЯННЫЕ ОБЛАКА', 'РАЗОРВАННЫЕ ОБЛАКА', 'ПАСМУРНЫЕ ОБЛАКА'];\r\nconst weatherArrayBe = ['НАВАЛЬНІЦА З ЛЁГКІМ ДАЖДЖОМ', 'НАВАЛЬНІЦА З ДАЖДЖОМ', 'НАВАЛЬНІЦА З МОЦНЫМ ДАЖДЖОМ', 'ЛЁГКАЯ НАВАЛЬНІЦА', 'НАВАЛЬНІЦА', 'МОЦНАЯ НАВАЛЬНІЦА', 'ІРВАНАЯ НАВАЛЬНІЦА', 'НАВАЛЬНІЦА З ДРОБНЫМ ДАЖДЖОМ', 'НАВАЛЬНІЦА З ДРОБНЫМ ДАЖДЖОМ', 'НАВАЛЬНІЦА З ДРОБНЫМ ДАЖДЖОМ', 'НАВАЛЬНІЦА З МОЦНЫМ ДАЖДЖОМ', 'ДРОБНЫ ДОЖДЖ', 'МОЦНЫ ДОЖДЖ', 'МОЦНЫ ДОЖДЖ', 'МОЦНЫ ДОЖДЖ', 'МОЦНЫ ДОЖДЖ', 'МОЦНЫ ДОЖДЖ', 'МОЦНЫ ДОЖДЖ', 'МОЦНЫ ДОЖДЖ', 'ДОЖДЖ І ІМЖА', 'ДОЖДЖ З ДАЖДЖОМ', 'НЕВЯЛІКІ ДОЖДЖ', ' ЎМЕРАНЫ ДОЖДЖ', 'МОЦНЫ ДОЖДЖ', 'ВЕЛЬМІ МОЦНЫ ДОЖДЖ', 'ЭКСТРЭМАЛЬНЫ ДОЖДЖ', 'ЛЕДЗЯНЫ ДОЖДЖ', 'ЛІВЕНЬ З ІНТЭНСІЎНЫМ ЛІЎНЕМ', 'ЛІВЕНЬ З ІНТЭНСІЎНЫМ ЛІЎНЕМ', 'ДОЖДЖ З ІНТЭНСІЎНЫМ ЛІЎНЕМ', 'ІРВАНЫ ЛІВЕНЬ', 'ЛЁГКІ СНЕГ', 'СНЕГ', 'МОЦНЫ СНЕГ', 'МОКРЫ СНЕГ', 'ДОЖДЖ СА СНЕГАМ', 'ДОЖДЖ СА СНЕГАМ', 'ЛЁГКІ ДОЖДЖ СА СНЕГАМ', 'ДОЖДЖ СА СНЕГАМ', 'ДОЖДЖ СА СНЕГАМ', 'МОЦНЫ ДОЖДЖ СА СНЕГАМ', 'ТУМАН', 'ДЫМ', 'СМУГА', 'ПЯСЧАНЫЯ ВІХУРЫ', 'ТУМАН', 'ПЯСОК', 'ПЫЛ', 'ВУЛКАНІЧНЫ ПОПЕЛ', 'ШКВАЛЫ', 'ТАРНАДА', 'ЧЫСТАЕ НЕБА', 'МАЛА АБЛОКАЎ', 'РАССЕЯНЫЯ АБЛОКІ', 'РАЗАРВАНЫЯ АБЛОКІ', 'ПАХМУРНЫЯ АБЛОКІ'];\r\n\r\n\r\nasync function translateText(text, lang) {\r\n   const key = 'trnsl.1.1.20191215T105323Z.4672a2f04e4a1e06.87f998832f4ac029c742ab90ba2ff2d557f0eea7';\r\n   const url = `https://translate.yandex.net/api/v1.5/tr.json/translate?lang=${lang}&text=${text}&key=${key}`;\r\n   const data = await fetch(url).then((res) => res.json());\r\n   return data.text[0];\r\n}\r\n\r\n// window.onload = async function () {\r\n(async function() {\r\n   let language;\r\n   if (localStorage.getItem('language') !== null) {\r\n      language = localStorage.getItem('language');\r\n   } else {\r\n      language = 'en';\r\n   }\r\n   let degreesFormat;\r\n   if (localStorage.getItem('degreesFormat') !== null) {\r\n      degreesFormat = localStorage.getItem('degreesFormat');\r\n   } else {\r\n      degreesFormat = 'celsius';\r\n   }\r\n\r\n   let date = new Date();\r\n   const getYearTime = () => { // function that return time of the year (f.e. winter)\r\n      const timeOfTheYearObj = {\r\n         1: 'winter',\r\n         2: 'winter',\r\n         3: 'spring',\r\n         4: 'spring',\r\n         5: 'spring',\r\n         6: 'summer',\r\n         7: 'summer',\r\n         8: 'summer',\r\n         9: 'autumn',\r\n         10: 'autumn',\r\n         11: 'autumn',\r\n         12: 'winter',\r\n      };\r\n      const number = new Date().getMonth() + 1;\r\n      return timeOfTheYearObj[number];\r\n   };\r\n\r\n\r\n   const getDayTime = (hours) => (hours < 6 ? 'night' : hours < 12 ? 'morning' : hours < 18 ? 'day' : hours < 23 ? 'evening' : 'night');\r\n\r\n   async function getCurrentTime(...args) { // function that returns current city time\r\n      let timeZone;\r\n      if (args.length < 2) {\r\n         date = new Date();\r\n         timeZone = await setTimeZone();\r\n      } else {\r\n         timeZone = await setTimeZone(args[1]);\r\n         if (timeZone === 10800) {\r\n            date = new Date(Date.now());\r\n         } else {\r\n            date = new Date(Date.now() - 10800000 + timeZone * 1000);\r\n         }\r\n      }\r\n      if (args[0] === 'be') {\r\n         const weekDays = ['Ндз', 'Пнд', 'Аўт', 'Срд', 'Чц', 'Птн', 'Сбт'];\r\n         const monthArr = ['Стдудзеня', 'Лютага', 'Сакавіка', 'Красавіка', 'Мая', 'Чэрвеня', 'Ліпеня', 'Жниўня', 'Верасня', 'Кастрычніка', 'Лістапада', 'Снежня'];\r\n         return `${weekDays[date.getDay()]}, ${date.getDate()} ${monthArr[date.getMonth()]}, ${date.getHours()}:${date.getMinutes()} `;\r\n      }\r\n      const options = {\r\n         weekday: 'short',\r\n         hour: '2-digit',\r\n         minute: '2-digit',\r\n         month: 'long',\r\n         day: 'numeric',\r\n         hour12: false\r\n      };\r\n      const time = date.toLocaleString(args[0], options);\r\n      return time;\r\n   }\r\n\r\n// Names of next three days\r\n   const getFutureDate = (days, lang) => {\r\n      let weekDays;\r\n      switch (lang) {\r\n         case 'en':\r\n            weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n            break;\r\n         case 'ru':\r\n            weekDays = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\r\n            break;\r\n         case 'be':\r\n            weekDays = ['Нядзеля', 'Панядзелак', 'Аўторак', 'Серада', 'Чацвер', 'Пятніца', 'Субота'];\r\n            break;\r\n         default:\r\n            throw new Error('Incorrect language');\r\n      }\r\n      let i = date.getDay() + days;\r\n      if (i < weekDays.length) {\r\n         return weekDays[i];\r\n      }\r\n      while (i >= weekDays.length) {\r\n         i -= weekDays.length;\r\n      }\r\n      return weekDays[i];\r\n   };\r\n\r\n// Set location\r\n   async function geolocation() {\r\n      const url = `https://ipinfo.io/json?token=${token}`;\r\n      const data = await fetch(url).then((res) => res.json());\r\n      return data.city;\r\n   }\r\n\r\n   async function setTimeZone(...args) {\r\n      if (!args.length) {\r\n         const url = `https://ipinfo.io/json?token=${token}`;\r\n         const data = await fetch(url).then((res) => res.json());\r\n         return data.timezone;\r\n      }\r\n      const url = `https://api.openweathermap.org/data/2.5/forecast?q=${args[0]}&units=metric&APPID=${apiKey}`;\r\n      const data = await fetch(url).then((res) => res.json());\r\n      return data.city.timezone;\r\n   }\r\n\r\n   async function setLinkToImage(...args) { // function that returns background image\r\n      const accessKey = 'a4e459094ff30eccca82da8258dd3e4e4ce923d584ab01bb47d1e4d364388591';\r\n      let city;\r\n      if (!args.length) {\r\n         city = await geolocation();\r\n      } else {\r\n         city = await setWeatherByCity(args[0]);\r\n         city = city.city.name;\r\n      }\r\n      const yearTime = await getYearTime();\r\n      const dayTime = getDayTime(new Date().getHours());\r\n      const url = `https://api.unsplash.com/photos/random?query=${yearTime},${dayTime},${city}&client_id=${accessKey}`;\r\n      const data = await fetch(url).then((res) => res.json());\r\n      const body = document.querySelector('body');\r\n      body.style.backgroundImage = `url(${data.urls.full}&w=1100)`;\r\n   };\r\n\r\n\r\n   const token = '81bc3bbbc1edea'\r\n   async function setUserLocation(...args) { // function that returns user's location.\r\n      let url;\r\n      if (!args.length) {\r\n         url = `https://ipinfo.io/json?token=${token}`;\r\n         const data = await fetch(url).then((res) => res.json());\r\n         return [data.city, data.country];\r\n      }\r\n      if (args.length === 1) {\r\n         url = `https://api.openweathermap.org/data/2.5/forecast?q=${args[0]}&units=metric&APPID=${apiKey}`;\r\n      } else {\r\n         url = `https://api.openweathermap.org/data/2.5/forecast?lat=${args[1]}&lon=${args[0]}&units=metric&APPID=${apiKey}`;\r\n      }\r\n      const data = await fetch(url).then((res) => res.json());\r\n      return [data.city.name, data.city.country];\r\n   }\r\n\r\n   async function setWeatherByCity(...args) { // function that returns weather on 3 days using city name\r\n      let city;\r\n      if (!args.length) {\r\n         city = await geolocation();\r\n      } else {\r\n         city = args[0];\r\n      }\r\n      const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=${apiKey}`;\r\n      const data = await fetch(url).then((res) => res.json());\r\n      return data;\r\n   }\r\n\r\n   async function setCityTemperature(...args) { // function that returns temperature and temperature icons for 3 days\r\n      let city;\r\n      if (!args.length) {\r\n         city = await geolocation();\r\n      } else {\r\n         city = args[0];\r\n      }\r\n      const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=${apiKey}`;\r\n      const data = await fetch(url).then((res) => res.json());\r\n      return [\r\n         [Math.round(data.list[0].main.temp), data.list[0].weather[0].icon],\r\n         [Math.round(data.list[8].main.temp), data.list[8].weather[0].icon],\r\n         [Math.round(data.list[16].main.temp), data.list[16].weather[0].icon],\r\n         [Math.round(data.list[24].main.temp), data.list[24].weather[0].icon],\r\n      ];\r\n   }\r\n\r\n   //Today Weather\r\n   const apiKey = 'e7c43ccd84de13b498336e7124ca47df';\r\n   async function setLinkToWeather(...args) {\r\n      let city;\r\n      if (!args.length) {\r\n         city = await geolocation();\r\n      } else {\r\n         city = args[0];\r\n      }\r\n      const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=${apiKey}`;\r\n      const data = await fetch(url).then((res) => res.json());\r\n      const celsiusTemp = data.list[0].main.temp;\r\n      const {\r\n         humidity\r\n      } = data.list[0].main;\r\n      const windSpeed = data.list[0].wind.speed;\r\n      const feelsLikeTemp = celsiusTemp - 0.4 * (celsiusTemp - 10) * (1 - humidity / 100);\r\n      return [data.list[0].weather[0].description, Math.round(feelsLikeTemp), Math.round(windSpeed), humidity];\r\n   }\r\n\r\n\r\n   const convertDDToDMS = (dd) => {\r\n      const deg = dd | 0; // truncate dd to get degrees\r\n      const frac = Math.abs(dd - deg); // get fractional part\r\n      const min = (frac * 60) | 0; // multiply fraction by 60 and truncate\r\n      return `${deg}°${min}'`;\r\n   };\r\n\r\n\r\n   async function setCoordinates(city) {\r\n      const data = await setWeatherByCity(city);\r\n      if (data.cod === '404' || data.cod === '400') {\r\n         return -1;\r\n      }\r\n      const lng = data.city.coord.lon;\r\n      const lat = data.city.coord.lat;\r\n      return [lng, lat];\r\n   }\r\n\r\n\r\n   async function showOnTheMap(...args) {\r\n      let lng;\r\n      let lat;\r\n      if (!args.length) {\r\n         const data = await setWeatherByCity();\r\n         lng = data.city.coord.lon;\r\n         lat = data.city.coord.lat;\r\n      } else {\r\n         lng = args[0];\r\n         lat = args[1];\r\n      }\r\n      mapboxgl.accessToken = 'pk.eyJ1IjoiYWxpZ3VyYmFub3Y5NSIsImEiOiJjazQwMTc0dG0wOXd3M2xxdXQ3NTYzd3JpIn0.LebAdPabiueHpHwBLAZ04A';\r\n      const map = new mapboxgl.Map({\r\n         container: 'map', // container id\r\n         style: 'mapbox://styles/mapbox/streets-v11', // stylesheet location\r\n         center: [lng, lat], // starting position [lng, lat]\r\n         zoom: 9, // starting zoom\r\n      });\r\n      return map;\r\n   }\r\n\r\n\r\n\r\n   const contentWarapper = document.querySelector('.content-wrapper');\r\n   const htmlContent = `${controlBlock}<div class=\"weather-and-map\"><div class=\"weather-for-4-days\">${weatherForTodayBlock}${weatherFor3DaysBlock}</div>${mapBlock}</div>`;\r\n   contentWarapper.insertAdjacentHTML('afterbegin', htmlContent);\r\n   const loadBgButton = document.getElementById('load-bg');\r\n   const locationStr = document.querySelector('.weather-for-today h2');\r\n   const currentTimeStr = document.querySelector('.weather-for-today h4');\r\n   const temperatureForToday = document.querySelector('.temperature p');\r\n   const temperaturForTodayImg = document.querySelector('.temperature img');\r\n   const weatherForTodayDescription = document.querySelector('.description');\r\n   const changeColorInput = document.querySelector('input[type=\"color\"]');\r\n   const weatherForTodayFeelsLikeTemp = document.querySelector('.feels-like-temp');\r\n   const weatherForTodayWindSpeed = document.querySelector('.wind-speed');\r\n   const celsiusFormat = document.getElementById('celsius');\r\n   const weatherForTodayHumidity = document.querySelector('.humidity');\r\n   const searchInput = document.getElementById('search-input');\r\n   const searchBtn = document.getElementById('search-btn');\r\n   const languageBlock = document.querySelector('select');\r\n   const microImg = document.getElementById('micro');\r\n   const recognition = new webkitSpeechRecognition();\r\n   let isMicro = false;\r\n   recognition.interimResults = false;\r\n   let [lng, lat] = await setCoordinates(await geolocation());\r\n\r\n   languageBlock.value = language;\r\n   let feelsLikeText;\r\n   let windText;\r\n   let humidityText;\r\n   let searchText;\r\n   let speed;\r\n   let longitude;\r\n   let latitude;\r\n\r\n\r\n   let currentTemperature = await setCityTemperature(); // array that contains temperature and icons on current and next 3 days\r\n   const setTemperatureFor3Days = () => {\r\n      for (let i = 1; i <= 3; i += 1) {\r\n         const elem = document.querySelector(`.weather-for-3-days_element-${i}`);\r\n         elem.firstElementChild.innerText = getFutureDate(i, language);\r\n         if (degreesFormat === 'celsius') {\r\n            elem.lastElementChild.firstElementChild.innerText = `${currentTemperature[i][0]}°`;\r\n         } else {\r\n            elem.lastElementChild.firstElementChild.innerText = `${Math.round((9 / 5) * currentTemperature[i][0] + 32)}°`;\r\n         }\r\n         elem.lastElementChild.lastElementChild.setAttribute('src', `http://openweathermap.org/img/wn/${currentTemperature[i][1]}@2x.png`);\r\n      }\r\n   };\r\n   setLinkToImage();\r\n   translateText('Minsk, Belarus', 'ru');\r\n   setTemperatureFor3Days();\r\n   let weatherDescription;\r\n   const setweatherDescription = async (city) => {\r\n      weatherDescription = await setLinkToWeather(city);\r\n      weatherForTodayDescription.innerText = weatherDescription[0];\r\n      if (degreesFormat === 'celsius') {\r\n         weatherForTodayFeelsLikeTemp.innerText = `${feelsLikeText}: ${weatherDescription[1]}°`;\r\n      } else {\r\n         weatherForTodayFeelsLikeTemp.innerText = `${feelsLikeText}: ${Math.round((9 / 5) * weatherDescription[1] + 32)}°`;\r\n      }\r\n      weatherForTodayWindSpeed.innerText = `${windText}: ${weatherDescription[2]} ${speed}`;\r\n      weatherForTodayHumidity.innerText = `${humidityText}: ${weatherDescription[3]}%`;\r\n   };\r\n   await setweatherDescription(await setUserLocation());\r\n   let locationArray = await setUserLocation();\r\n   let city = locationArray[0];\r\n   const switchSiteLanguage = async () => {\r\n      let weatherDescriptionVariable;\r\n      switch (language) {\r\n         case 'en':\r\n            feelsLikeText = 'Feels like';\r\n            windText = 'Wind';\r\n            humidityText = 'Humidity';\r\n            searchText = 'Search';\r\n            speed = 'm/s';\r\n            longitude = 'Longitude';\r\n            latitude = 'Latitude';\r\n            weatherDescriptionVariable = weatherDescription[0];\r\n            break;\r\n         case 'ru':\r\n            feelsLikeText = 'Чувствуется как';\r\n            windText = 'Ветер';\r\n            humidityText = 'Влажность';\r\n            searchText = 'Найти';\r\n            speed = 'м/с';\r\n            longitude = 'Долгота';\r\n            latitude = 'Широта';\r\n            weatherDescriptionVariable = weatherArrayRu[weatherArrayEng.indexOf(weatherDescription[0].toUpperCase())];\r\n            break;\r\n         case 'be':\r\n            feelsLikeText = 'Адчуваецаа як';\r\n            windText = 'Вецер';\r\n            humidityText = 'Вільготнасць';\r\n            searchText = 'Знайсці';\r\n            speed = 'м/с';\r\n            longitude = 'Даўгата';\r\n            latitude = 'Шырата';\r\n            weatherDescriptionVariable = weatherArrayBe[weatherArrayEng.indexOf(weatherDescription[0].toUpperCase())];\r\n            break;\r\n         default:\r\n            throw new Error('Incorrect language');\r\n      }\r\n      locationStr.innerText = await translateText(locationStr.innerText, language);\r\n      document.querySelector('#search-btn p').innerText = searchText;\r\n      weatherForTodayDescription.innerText = weatherDescriptionVariable;\r\n      weatherForTodayFeelsLikeTemp.innerText = `${feelsLikeText}: ${weatherDescription[1]}°`;\r\n      weatherForTodayWindSpeed.innerText = `${windText}: ${weatherDescription[2]} ${speed}`;\r\n      weatherForTodayHumidity.innerText = `${humidityText}: ${weatherDescription[3]}%`;\r\n      for (let i = 1; i <= 3; i += 1) {\r\n         const elem = document.querySelector(`.weather-for-3-days_element-${i}`);\r\n         elem.firstElementChild.innerText = getFutureDate(i, language);\r\n      }\r\n      document.querySelector('.lon').innerText = `${longitude}: ${convertDDToDMS(lng)}`;\r\n      document.querySelector('.lat').innerText = `${latitude}: ${convertDDToDMS(lat)}`;\r\n      currentTimeStr.innerText = await getCurrentTime(language, city);\r\n   };\r\n   let countryCode = locationArray[1];\r\n   currentTimeStr.innerText = await getCurrentTime(language);\r\n   locationStr.innerText = `${city}, ${fullCountryNames[countryCode]}`; // set user's country and city\r\n   switchSiteLanguage();\r\n   if (degreesFormat === 'celsius') {\r\n      temperatureForToday.innerText = `${currentTemperature[0][0]}°`;\r\n      celsiusFormat.setAttribute('checked', true);\r\n   } else {\r\n      temperatureForToday.innerText = `${Math.round((9 / 5) * currentTemperature[0][0] + 32)}°`;\r\n      document.getElementById('fahrenheit').setAttribute('checked', true);\r\n   }\r\n   temperaturForTodayImg.setAttribute('src', `http://openweathermap.org/img/wn/${currentTemperature[0][1]}@2x.png`);\r\n   setInterval(async () => {\r\n      currentTimeStr.innerText = await getCurrentTime(language, city);\r\n   }, 60000);\r\n   showOnTheMap();\r\n   document.querySelector('.lon').innerText = `${longitude}: ${convertDDToDMS(lng)}`;\r\n   document.querySelector('.lat').innerText = `${latitude}: ${convertDDToDMS(lat)}`;\r\n\r\n   searchBtn.addEventListener('click', async () => {\r\n      if (isMicro) {\r\n         microImg.setAttribute('src', 'src/icons/microfon.png');\r\n         recognition.stop();\r\n      }\r\n      if (await setCoordinates(searchInput.value) === -1) {\r\n         searchInput.value = language === 'en' ? 'Incorrect city name' : language === 'ru' ? 'Неправильное название города' : 'Няправільная назва горада';\r\n         return;\r\n      }\r\n      [lng, lat] = await setCoordinates(searchInput.value);\r\n      searchInput.value = '';\r\n      showOnTheMap(lng, lat);\r\n      document.querySelector('.lon').innerText = `${longitude}: ${convertDDToDMS(lng)}`;\r\n      document.querySelector('.lat').innerText = `${latitude}: ${convertDDToDMS(lat)}`;\r\n      locationArray = await setUserLocation(lng, lat);\r\n      city = locationArray[0];\r\n      countryCode = locationArray[1];\r\n      currentTimeStr.innerText = await getCurrentTime(language, city);\r\n      setLinkToImage(city);\r\n      currentTemperature = await setCityTemperature(city);\r\n      locationStr.innerText = `${city}, ${fullCountryNames[countryCode]}`;\r\n      if (degreesFormat === 'celsius') {\r\n         temperatureForToday.innerText = `${currentTemperature[0][0]}°`;\r\n      } else {\r\n         temperatureForToday.innerText = `${Math.round((9 / 5) * currentTemperature[0][0] + 32)}°`;\r\n      }\r\n      temperaturForTodayImg.setAttribute('src', `http://openweathermap.org/img/wn/${currentTemperature[0][1]}@2x.png`);\r\n      await setweatherDescription(city);\r\n      setTemperatureFor3Days();\r\n      switchSiteLanguage();\r\n   });\r\n   document.querySelectorAll('input[name=\"degrees\"]').forEach((e) => {\r\n      e.addEventListener('change', () => {\r\n         if (celsiusFormat.checked) {\r\n            degreesFormat = 'celsius';\r\n            temperatureForToday.innerText = `${Math.round((5 / 9) * (temperatureForToday.innerText.substr(0, temperatureForToday.innerText.length - 1) - 32))}°`;\r\n            for (let i = 1; i <= 3; i += 1) {\r\n               const elem = document.querySelector(`.weather-for-3-days_element-${i}`);\r\n               elem.lastElementChild.firstElementChild.innerText = `${Math.round((5 / 9) * (elem.lastElementChild.firstElementChild.innerText.substr(0, elem.lastElementChild.firstElementChild.innerText.length - 1) - 32))}°`;\r\n            }\r\n            weatherForTodayFeelsLikeTemp.innerText = `${feelsLikeText}: ${weatherDescription[1]}°`;\r\n         } else {\r\n            degreesFormat = 'fahrenheit';\r\n            temperatureForToday.innerText = `${Math.round((9 / 5) * temperatureForToday.innerText.substr(0, temperatureForToday.innerText.length - 1) + 32)}°`;\r\n            for (let i = 1; i <= 3; i += 1) {\r\n               const elem = document.querySelector(`.weather-for-3-days_element-${i}`);\r\n               elem.lastElementChild.firstElementChild.innerText = `${Math.round((9 / 5) * elem.lastElementChild.firstElementChild.innerText.substr(0, elem.lastElementChild.firstElementChild.innerText.length - 1) + 32)}°`;\r\n            }\r\n            weatherForTodayFeelsLikeTemp.innerText = `${feelsLikeText}: ${Math.round((9 / 5) * weatherDescription[1] + 32)}°`;\r\n         }\r\n      });\r\n   });\r\n   languageBlock.addEventListener('change', () => {\r\n      language = languageBlock.value;\r\n      switchSiteLanguage();\r\n   });\r\n   loadBgButton.addEventListener('click', () => { // creates new background image\r\n      setLinkToImage(city);\r\n   });\r\n   changeColorInput.addEventListener('change', () => {\r\n      document.querySelector('body').style.color = changeColorInput.value;\r\n      languageBlock.style.color = changeColorInput.value;\r\n      searchInput.style.color = changeColorInput.value;\r\n   });\r\n\r\n\r\n   microImg.addEventListener('click', () => {\r\n      isMicro = !isMicro;\r\n      if (isMicro) {\r\n         microImg.setAttribute('src', 'src/icons/micro_active.png'),\r\n         recognition.start();\r\n      } else {\r\n         microImg.setAttribute('src', 'src/icons/microfon.png');\r\n         recognition.abort();\r\n      }\r\n   });\r\n\r\n   recognition.addEventListener('result', (e) => {\r\n      const transcript = Array.from(e.results)\r\n         .map((result) => result[0])\r\n         .map((result) => result.transcript)\r\n         .join('');\r\n      if (isMicro) {\r\n         searchInput.value = transcript;\r\n      }\r\n   });\r\n\r\n   recognition.addEventListener('end', recognition);\r\n\r\n\r\n   window.addEventListener('beforeunload', () => {\r\n      localStorage.setItem('degreesFormat', degreesFormat);\r\n      localStorage.setItem('language', language);\r\n   });\r\n}());\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL3NjcmlwdC5qcz9kNmNkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbnRyb2xCbG9jayA9IGA8ZGl2IGNsYXNzPVwiY29udHJvbC1ibG9ja1wiPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRyb2wtYmxvY2tfYnV0dG9uc1wiPlxyXG4gICAgPGxhYmVsIGNsYXNzPVwiY2hhbmdlLWNvbG9yXCI+XHJcbiAgICAgPGlucHV0IHR5cGU9XCJjb2xvclwiIHZhbHVlPVwiI2ZmZmZmZlwiPlxyXG4gICAgIDxkaXYgY2xhc3M9XCJjaXJjbGVcIj48L2Rpdj5cclxuICAgIDwvbGFiZWw+XHJcbiAgICAgIDxpbWcgaWQ9XCJsb2FkLWJnXCIgc3JjPVwic3JjL2ljb25zL3JlbG9hZC5zdmdcIiB3aWR0aD1cIjQ1XCIgaGVpZ2h0PVwiNDVcIj5cclxuICAgICAgPHNlbGVjdCBjbGFzcz1cImNvbnRyb2wtYmxvY2tfbGFuZ3VhZ2VzXCI+XHJcbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImVuXCI+RU48L29wdGlvbj5cclxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwicnVcIj5SVTwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJiZVwiPkJFPC9vcHRpb24+XHJcbiAgICAgIDwvc2VsZWN0PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbC1ibG9ja19jaG9vc2UtZGVncmVlc1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsYWJlbHMtZm9yLWRlZ3JlZXMtaW5wdXRzXCI+XHJcbiAgICAgICAgICA8aW5wdXQgaWQ9XCJjZWxzaXVzXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cImRlZ3JlZXNcIiB2YWx1ZT1cImNcIiBjaGVja2VkPlxyXG4gICAgICAgICAgPGxhYmVsIGZvcj1cImNlbHNpdXNcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNlbHNpdXNcIj5cclxuICAgICAgICAgICAgICA8cD7CsEM8L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgIDxpbnB1dCBpZD1cImZhaHJlbmhlaXRcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZGVncmVlc1wiIHZhbHVlPVwiZlwiPlxyXG4gICAgICAgICAgPGxhYmVsIGZvcj1cImZhaHJlbmhlaXRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZhaHJlbmhlaXRcIj5cclxuICAgICAgICAgICAgICA8cD7CsEY8L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJjb250cm9sLWJsb2NrX3NlYXJjaFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwic2VhcmNoLWlucHV0XCI+XHJcbiAgICAgICAgPGlucHV0IGlkPVwic2VhcmNoLWlucHV0XCIgdHlwZT1cInRleHRcIj5cclxuICAgICAgICA8aW1nIGlkPVwibWljcm9cIiBzcmM9XCJzcmMvaWNvbnMvbWljcm9mb24ucG5nXCIgd2lkdGg9XCIxNC41XCIgaGVpZ2h0PVwiMTdcIiBhbHQ9XCJtaWNyb1wiPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBpZD1cInNlYXJjaC1idG5cIiBjbGFzcz1cInNlYXJjaC1idG5cIj5cclxuICAgICAgICA8cD5TRUFSQ0g8L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+YDtcclxuXHJcblxyXG5jb25zdCB3ZWF0aGVyRm9yM0RheXNCbG9jayA9IGA8ZGl2IGNsYXNzPVwid2VhdGhlci1mb3ItMy1kYXlzXCI+XHJcbiAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwid2VhdGhlci1mb3ItMy1kYXlzX2VsZW1lbnQgd2VhdGhlci1mb3ItMy1kYXlzX2VsZW1lbnQtMVwiPlxyXG4gICAgICAgICAgICAgICA8cD48L3A+XHJcbiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZW1wZXJhdHVyZS1uZXh0LWRheXNcIj5cclxuICAgICAgICAgICAgICAgICA8cD48L3A+XHJcbiAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJcIiBhbHQ9XCJcIj5cclxuICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3ZWF0aGVyLWZvci0zLWRheXNfZWxlbWVudCB3ZWF0aGVyLWZvci0zLWRheXNfZWxlbWVudC0yXCI+XHJcbiAgICAgICAgICAgICAgIDxwPjwvcD5cclxuICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRlbXBlcmF0dXJlLW5leHQtZGF5c1wiPlxyXG4gICAgICAgICAgICAgICAgIDxwPjwvcD5cclxuICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIlwiIGFsdD1cIlwiPlxyXG4gICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz1cIndlYXRoZXItZm9yLTMtZGF5c19lbGVtZW50IHdlYXRoZXItZm9yLTMtZGF5c19lbGVtZW50LTNcIj5cclxuICAgICAgICAgICAgICAgPHA+PC9wPlxyXG4gICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGVtcGVyYXR1cmUtbmV4dC1kYXlzXCI+XHJcbiAgICAgICAgICAgICAgICAgPHA+PC9wPlxyXG4gICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiXCIgYWx0PVwiXCI+XHJcbiAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgPC9kaXY+YDtcclxuXHJcblxyXG5jb25zdCB3ZWF0aGVyRm9yVG9kYXlCbG9jayA9IGA8ZGl2IGNsYXNzPVwid2VhdGhlci1mb3ItdG9kYXlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPjwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND48L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwid2VhdGhlci1mb3ItdG9kYXlfd2VhdGhlci1kZXNjcmlwdGlvbi1ibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZW1wZXJhdHVyZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwid2VhdGhlci1kZXNjcmlwdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIndlYXRoZXItZGVzY3JpcHRpb24tcGFyYW1zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiZGVzY3JpcHRpb25cIj48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiZmVlbHMtbGlrZS10ZW1wXCI+PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIndpbmQtc3BlZWRcIj48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiaHVtaWRpdHlcIj48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG5cclxuY29uc3QgbWFwQmxvY2sgPSBgPGRpdiBjbGFzcz1cIm1hcC1jb250YWluZXJcIj5cclxuICAgICAgICAgPGRpdiBpZD1cIm1hcFwiPjwvZGl2PlxyXG4gICAgICAgICA8cCBjbGFzcz1cImxvblwiPkxvbmdpdHVkZTo8L3A+XHJcbiAgICAgICAgIDxwIGNsYXNzPVwibGF0XCI+TGF0aXR1ZGU6PC9wPlxyXG4gICAgICAgPC9kaXY+YDtcclxuXHJcblxyXG5jb25zdCBmdWxsQ291bnRyeU5hbWVzID0ge1xyXG4gICBCRDogJ0JhbmdsYWRlc2gnLFxyXG4gICBCRTogJ0JlbGdpdW0nLFxyXG4gICBCRjogJ0J1cmtpbmEgRmFzbycsXHJcbiAgIEJHOiAnQnVsZ2FyaWEnLFxyXG4gICBCQTogJ0Jvc25pYSBhbmQgSGVyemVnb3ZpbmEnLFxyXG4gICBCQjogJ0JhcmJhZG9zJyxcclxuICAgV0Y6ICdXYWxsaXMgYW5kIEZ1dHVuYScsXHJcbiAgIEJMOiAnU2FpbnQgQmFydGhlbGVteScsXHJcbiAgIEJNOiAnQmVybXVkYScsXHJcbiAgIEJOOiAnQnJ1bmVpJyxcclxuICAgQk86ICdCb2xpdmlhJyxcclxuICAgQkg6ICdCYWhyYWluJyxcclxuICAgQkk6ICdCdXJ1bmRpJyxcclxuICAgQko6ICdCZW5pbicsXHJcbiAgIEJUOiAnQmh1dGFuJyxcclxuICAgSk06ICdKYW1haWNhJyxcclxuICAgQlY6ICdCb3V2ZXQgSXNsYW5kJyxcclxuICAgQlc6ICdCb3Rzd2FuYScsXHJcbiAgIFdTOiAnU2Ftb2EnLFxyXG4gICBCUTogJ0JvbmFpcmUsIFNhaW50IEV1c3RhdGl1cyBhbmQgU2FiYSAnLFxyXG4gICBCUjogJ0JyYXppbCcsXHJcbiAgIEJTOiAnQmFoYW1hcycsXHJcbiAgIEpFOiAnSmVyc2V5JyxcclxuICAgQlk6ICdCZWxhcnVzJyxcclxuICAgQlo6ICdCZWxpemUnLFxyXG4gICBSVTogJ1J1c3NpYScsXHJcbiAgIFJXOiAnUndhbmRhJyxcclxuICAgUlM6ICdTZXJiaWEnLFxyXG4gICBUTDogJ0Vhc3QgVGltb3InLFxyXG4gICBSRTogJ1JldW5pb24nLFxyXG4gICBUTTogJ1R1cmttZW5pc3RhbicsXHJcbiAgIFRKOiAnVGFqaWtpc3RhbicsXHJcbiAgIFJPOiAnUm9tYW5pYScsXHJcbiAgIFRLOiAnVG9rZWxhdScsXHJcbiAgIEdXOiAnR3VpbmVhLUJpc3NhdScsXHJcbiAgIEdVOiAnR3VhbScsXHJcbiAgIEdUOiAnR3VhdGVtYWxhJyxcclxuICAgR1M6ICdTb3V0aCBHZW9yZ2lhIGFuZCB0aGUgU291dGggU2FuZHdpY2ggSXNsYW5kcycsXHJcbiAgIEdSOiAnR3JlZWNlJyxcclxuICAgR1E6ICdFcXVhdG9yaWFsIEd1aW5lYScsXHJcbiAgIEdQOiAnR3VhZGVsb3VwZScsXHJcbiAgIEpQOiAnSmFwYW4nLFxyXG4gICBHWTogJ0d1eWFuYScsXHJcbiAgIEdHOiAnR3Vlcm5zZXknLFxyXG4gICBHRjogJ0ZyZW5jaCBHdWlhbmEnLFxyXG4gICBHRTogJ0dlb3JnaWEnLFxyXG4gICBHRDogJ0dyZW5hZGEnLFxyXG4gICBHQjogJ1VuaXRlZCBLaW5nZG9tJyxcclxuICAgR0E6ICdHYWJvbicsXHJcbiAgIFNWOiAnRWwgU2FsdmFkb3InLFxyXG4gICBHTjogJ0d1aW5lYScsXHJcbiAgIEdNOiAnR2FtYmlhJyxcclxuICAgR0w6ICdHcmVlbmxhbmQnLFxyXG4gICBHSTogJ0dpYnJhbHRhcicsXHJcbiAgIEdIOiAnR2hhbmEnLFxyXG4gICBPTTogJ09tYW4nLFxyXG4gICBUTjogJ1R1bmlzaWEnLFxyXG4gICBKTzogJ0pvcmRhbicsXHJcbiAgIEhSOiAnQ3JvYXRpYScsXHJcbiAgIEhUOiAnSGFpdGknLFxyXG4gICBIVTogJ0h1bmdhcnknLFxyXG4gICBISzogJ0hvbmcgS29uZycsXHJcbiAgIEhOOiAnSG9uZHVyYXMnLFxyXG4gICBITTogJ0hlYXJkIElzbGFuZCBhbmQgTWNEb25hbGQgSXNsYW5kcycsXHJcbiAgIFZFOiAnVmVuZXp1ZWxhJyxcclxuICAgUFI6ICdQdWVydG8gUmljbycsXHJcbiAgIFBTOiAnUGFsZXN0aW5pYW4gVGVycml0b3J5JyxcclxuICAgUFc6ICdQYWxhdScsXHJcbiAgIFBUOiAnUG9ydHVnYWwnLFxyXG4gICBTSjogJ1N2YWxiYXJkIGFuZCBKYW4gTWF5ZW4nLFxyXG4gICBQWTogJ1BhcmFndWF5JyxcclxuICAgSVE6ICdJcmFxJyxcclxuICAgUEE6ICdQYW5hbWEnLFxyXG4gICBQRjogJ0ZyZW5jaCBQb2x5bmVzaWEnLFxyXG4gICBQRzogJ1BhcHVhIE5ldyBHdWluZWEnLFxyXG4gICBQRTogJ1BlcnUnLFxyXG4gICBQSzogJ1Bha2lzdGFuJyxcclxuICAgUEg6ICdQaGlsaXBwaW5lcycsXHJcbiAgIFBOOiAnUGl0Y2Fpcm4nLFxyXG4gICBQTDogJ1BvbGFuZCcsXHJcbiAgIFBNOiAnU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvbicsXHJcbiAgIFpNOiAnWmFtYmlhJyxcclxuICAgRUg6ICdXZXN0ZXJuIFNhaGFyYScsXHJcbiAgIEVFOiAnRXN0b25pYScsXHJcbiAgIEVHOiAnRWd5cHQnLFxyXG4gICBaQTogJ1NvdXRoIEFmcmljYScsXHJcbiAgIEVDOiAnRWN1YWRvcicsXHJcbiAgIElUOiAnSXRhbHknLFxyXG4gICBWTjogJ1ZpZXRuYW0nLFxyXG4gICBTQjogJ1NvbG9tb24gSXNsYW5kcycsXHJcbiAgIEVUOiAnRXRoaW9waWEnLFxyXG4gICBTTzogJ1NvbWFsaWEnLFxyXG4gICBaVzogJ1ppbWJhYndlJyxcclxuICAgU0E6ICdTYXVkaSBBcmFiaWEnLFxyXG4gICBFUzogJ1NwYWluJyxcclxuICAgRVI6ICdFcml0cmVhJyxcclxuICAgTUU6ICdNb250ZW5lZ3JvJyxcclxuICAgTUQ6ICdNb2xkb3ZhJyxcclxuICAgTUc6ICdNYWRhZ2FzY2FyJyxcclxuICAgTUY6ICdTYWludCBNYXJ0aW4nLFxyXG4gICBNQTogJ01vcm9jY28nLFxyXG4gICBNQzogJ01vbmFjbycsXHJcbiAgIFVaOiAnVXpiZWtpc3RhbicsXHJcbiAgIE1NOiAnTXlhbm1hcicsXHJcbiAgIE1MOiAnTWFsaScsXHJcbiAgIE1POiAnTWFjYW8nLFxyXG4gICBNTjogJ01vbmdvbGlhJyxcclxuICAgTUg6ICdNYXJzaGFsbCBJc2xhbmRzJyxcclxuICAgTUs6ICdNYWNlZG9uaWEnLFxyXG4gICBNVTogJ01hdXJpdGl1cycsXHJcbiAgIE1UOiAnTWFsdGEnLFxyXG4gICBNVzogJ01hbGF3aScsXHJcbiAgIE1WOiAnTWFsZGl2ZXMnLFxyXG4gICBNUTogJ01hcnRpbmlxdWUnLFxyXG4gICBNUDogJ05vcnRoZXJuIE1hcmlhbmEgSXNsYW5kcycsXHJcbiAgIE1TOiAnTW9udHNlcnJhdCcsXHJcbiAgIE1SOiAnTWF1cml0YW5pYScsXHJcbiAgIElNOiAnSXNsZSBvZiBNYW4nLFxyXG4gICBVRzogJ1VnYW5kYScsXHJcbiAgIFRaOiAnVGFuemFuaWEnLFxyXG4gICBNWTogJ01hbGF5c2lhJyxcclxuICAgTVg6ICdNZXhpY28nLFxyXG4gICBJTDogJ0lzcmFlbCcsXHJcbiAgIEZSOiAnRnJhbmNlJyxcclxuICAgSU86ICdCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnknLFxyXG4gICBTSDogJ1NhaW50IEhlbGVuYScsXHJcbiAgIEZJOiAnRmlubGFuZCcsXHJcbiAgIEZKOiAnRmlqaScsXHJcbiAgIEZLOiAnRmFsa2xhbmQgSXNsYW5kcycsXHJcbiAgIEZNOiAnTWljcm9uZXNpYScsXHJcbiAgIEZPOiAnRmFyb2UgSXNsYW5kcycsXHJcbiAgIE5JOiAnTmljYXJhZ3VhJyxcclxuICAgTkw6ICdOZXRoZXJsYW5kcycsXHJcbiAgIE5POiAnTm9yd2F5JyxcclxuICAgTkE6ICdOYW1pYmlhJyxcclxuICAgVlU6ICdWYW51YXR1JyxcclxuICAgTkM6ICdOZXcgQ2FsZWRvbmlhJyxcclxuICAgTkU6ICdOaWdlcicsXHJcbiAgIE5GOiAnTm9yZm9sayBJc2xhbmQnLFxyXG4gICBORzogJ05pZ2VyaWEnLFxyXG4gICBOWjogJ05ldyBaZWFsYW5kJyxcclxuICAgTlA6ICdOZXBhbCcsXHJcbiAgIE5SOiAnTmF1cnUnLFxyXG4gICBOVTogJ05pdWUnLFxyXG4gICBDSzogJ0Nvb2sgSXNsYW5kcycsXHJcbiAgIFhLOiAnS29zb3ZvJyxcclxuICAgQ0k6ICdJdm9yeSBDb2FzdCcsXHJcbiAgIENIOiAnU3dpdHplcmxhbmQnLFxyXG4gICBDTzogJ0NvbG9tYmlhJyxcclxuICAgQ046ICdDaGluYScsXHJcbiAgIENNOiAnQ2FtZXJvb24nLFxyXG4gICBDTDogJ0NoaWxlJyxcclxuICAgQ0M6ICdDb2NvcyBJc2xhbmRzJyxcclxuICAgQ0E6ICdDYW5hZGEnLFxyXG4gICBDRzogJ1JlcHVibGljIG9mIHRoZSBDb25nbycsXHJcbiAgIENGOiAnQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljJyxcclxuICAgQ0Q6ICdEZW1vY3JhdGljIFJlcHVibGljIG9mIHRoZSBDb25nbycsXHJcbiAgIENaOiAnQ3plY2ggUmVwdWJsaWMnLFxyXG4gICBDWTogJ0N5cHJ1cycsXHJcbiAgIENYOiAnQ2hyaXN0bWFzIElzbGFuZCcsXHJcbiAgIENSOiAnQ29zdGEgUmljYScsXHJcbiAgIENXOiAnQ3VyYWNhbycsXHJcbiAgIENWOiAnQ2FwZSBWZXJkZScsXHJcbiAgIENVOiAnQ3ViYScsXHJcbiAgIFNaOiAnU3dhemlsYW5kJyxcclxuICAgU1k6ICdTeXJpYScsXHJcbiAgIFNYOiAnU2ludCBNYWFydGVuJyxcclxuICAgS0c6ICdLeXJneXpzdGFuJyxcclxuICAgS0U6ICdLZW55YScsXHJcbiAgIFNTOiAnU291dGggU3VkYW4nLFxyXG4gICBTUjogJ1N1cmluYW1lJyxcclxuICAgS0k6ICdLaXJpYmF0aScsXHJcbiAgIEtIOiAnQ2FtYm9kaWEnLFxyXG4gICBLTjogJ1NhaW50IEtpdHRzIGFuZCBOZXZpcycsXHJcbiAgIEtNOiAnQ29tb3JvcycsXHJcbiAgIFNUOiAnU2FvIFRvbWUgYW5kIFByaW5jaXBlJyxcclxuICAgU0s6ICdTbG92YWtpYScsXHJcbiAgIEtSOiAnU291dGggS29yZWEnLFxyXG4gICBTSTogJ1Nsb3ZlbmlhJyxcclxuICAgS1A6ICdOb3J0aCBLb3JlYScsXHJcbiAgIEtXOiAnS3V3YWl0JyxcclxuICAgU046ICdTZW5lZ2FsJyxcclxuICAgU006ICdTYW4gTWFyaW5vJyxcclxuICAgU0w6ICdTaWVycmEgTGVvbmUnLFxyXG4gICBTQzogJ1NleWNoZWxsZXMnLFxyXG4gICBLWjogJ0themFraHN0YW4nLFxyXG4gICBLWTogJ0NheW1hbiBJc2xhbmRzJyxcclxuICAgU0c6ICdTaW5nYXBvcmUnLFxyXG4gICBTRTogJ1N3ZWRlbicsXHJcbiAgIFNEOiAnU3VkYW4nLFxyXG4gICBETzogJ0RvbWluaWNhbiBSZXB1YmxpYycsXHJcbiAgIERNOiAnRG9taW5pY2EnLFxyXG4gICBESjogJ0RqaWJvdXRpJyxcclxuICAgREs6ICdEZW5tYXJrJyxcclxuICAgVkc6ICdCcml0aXNoIFZpcmdpbiBJc2xhbmRzJyxcclxuICAgREU6ICdHZXJtYW55JyxcclxuICAgWUU6ICdZZW1lbicsXHJcbiAgIERaOiAnQWxnZXJpYScsXHJcbiAgIFVTOiAnVW5pdGVkIFN0YXRlcycsXHJcbiAgIFVZOiAnVXJ1Z3VheScsXHJcbiAgIFlUOiAnTWF5b3R0ZScsXHJcbiAgIFVNOiAnVW5pdGVkIFN0YXRlcyBNaW5vciBPdXRseWluZyBJc2xhbmRzJyxcclxuICAgTEI6ICdMZWJhbm9uJyxcclxuICAgTEM6ICdTYWludCBMdWNpYScsXHJcbiAgIExBOiAnTGFvcycsXHJcbiAgIFRWOiAnVHV2YWx1JyxcclxuICAgVFc6ICdUYWl3YW4nLFxyXG4gICBUVDogJ1RyaW5pZGFkIGFuZCBUb2JhZ28nLFxyXG4gICBUUjogJ1R1cmtleScsXHJcbiAgIExLOiAnU3JpIExhbmthJyxcclxuICAgTEk6ICdMaWVjaHRlbnN0ZWluJyxcclxuICAgTFY6ICdMYXR2aWEnLFxyXG4gICBUTzogJ1RvbmdhJyxcclxuICAgTFQ6ICdMaXRodWFuaWEnLFxyXG4gICBMVTogJ0x1eGVtYm91cmcnLFxyXG4gICBMUjogJ0xpYmVyaWEnLFxyXG4gICBMUzogJ0xlc290aG8nLFxyXG4gICBUSDogJ1RoYWlsYW5kJyxcclxuICAgVEY6ICdGcmVuY2ggU291dGhlcm4gVGVycml0b3JpZXMnLFxyXG4gICBURzogJ1RvZ28nLFxyXG4gICBURDogJ0NoYWQnLFxyXG4gICBUQzogJ1R1cmtzIGFuZCBDYWljb3MgSXNsYW5kcycsXHJcbiAgIExZOiAnTGlieWEnLFxyXG4gICBWQTogJ1ZhdGljYW4nLFxyXG4gICBWQzogJ1NhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzJyxcclxuICAgQUU6ICdVbml0ZWQgQXJhYiBFbWlyYXRlcycsXHJcbiAgIEFEOiAnQW5kb3JyYScsXHJcbiAgIEFHOiAnQW50aWd1YSBhbmQgQmFyYnVkYScsXHJcbiAgIEFGOiAnQWZnaGFuaXN0YW4nLFxyXG4gICBBSTogJ0FuZ3VpbGxhJyxcclxuICAgVkk6ICdVLlMuIFZpcmdpbiBJc2xhbmRzJyxcclxuICAgSVM6ICdJY2VsYW5kJyxcclxuICAgSVI6ICdJcmFuJyxcclxuICAgQU06ICdBcm1lbmlhJyxcclxuICAgQUw6ICdBbGJhbmlhJyxcclxuICAgQU86ICdBbmdvbGEnLFxyXG4gICBBUTogJ0FudGFyY3RpY2EnLFxyXG4gICBBUzogJ0FtZXJpY2FuIFNhbW9hJyxcclxuICAgQVI6ICdBcmdlbnRpbmEnLFxyXG4gICBBVTogJ0F1c3RyYWxpYScsXHJcbiAgIEFUOiAnQXVzdHJpYScsXHJcbiAgIEFXOiAnQXJ1YmEnLFxyXG4gICBJTjogJ0luZGlhJyxcclxuICAgQVg6ICdBbGFuZCBJc2xhbmRzJyxcclxuICAgQVo6ICdBemVyYmFpamFuJyxcclxuICAgSUU6ICdJcmVsYW5kJyxcclxuICAgSUQ6ICdJbmRvbmVzaWEnLFxyXG4gICBVQTogJ1VrcmFpbmUnLFxyXG4gICBRQTogJ1FhdGFyJyxcclxuICAgTVo6ICdNb3phbWJpcXVlJyxcclxufTtcclxuXHJcbmNvbnN0IHdlYXRoZXJBcnJheUVuZyA9IFsnVEhVTkRFUlNUT1JNIFdJVEggTElHSFQgUkFJTicsICdUSFVOREVSU1RPUk0gV0lUSCBSQUlOJywgJ1RIVU5ERVJTVE9STSBXSVRIIEhFQVZZIFJBSU4nLCAnTElHSFQgVEhVTkRFUlNUT1JNJywgJ1RIVU5ERVJTVE9STScsICdIRUFWWSBUSFVOREVSU1RPUk0nLCAnUkFHR0VEIFRIVU5ERVJTVE9STScsICdUSFVOREVSU1RPUk0gV0lUSCBMSUdIVCBEUklaWkxFJywgJ1RIVU5ERVJTVE9STSBXSVRIIERSSVpaTEUnLCAnVEhVTkRFUlNUT1JNIFdJVEggSEVBVlkgRFJJWlpMRScsICdMSUdIVCBJTlRFTlNJVFkgRFJJWlpMRScsICdEUklaWkxFJywgJ0hFQVZZIElOVEVOU0lUWSBEUklaWkxFJywgJ0xJR0hUIElOVEVOU0lUWSBEUklaWkxFIFJBSU4nLCAnRFJJWlpMRSBSQUlOJywgJ0hFQVZZIElOVEVOU0lUWSBEUklaWkxFIFJBSU4nLCAnU0hPV0VSIFJBSU4gQU5EIERSSVpaTEUnLCAnSEVBVlkgU0hPV0VSIFJBSU4gQU5EIERSSVpaTEUnLCAnU0hPV0VSIERSSVpaTEUnLCAnTElHSFQgUkFJTicsICdNT0RFUkFURSBSQUlOJywgJ0hFQVZZIElOVEVOU0lUWSBSQUlOJywgJ1ZFUlkgSEVBVlkgUkFJTicsICdFWFRSRU1FIFJBSU4nLCAnRlJFRVpJTkcgUkFJTicsICdMSUdIVCBJTlRFTlNJVFkgU0hPV0VSIFJBSU4nLCAnU0hPV0VSIFJBSU4nLCAnSEVBVlkgSU5URU5TSVRZIFNIT1dFUiBSQUlOJywgJ1JBR0dFRCBTSE9XRVIgUkFJTicsICdMSUdIVCBTTk9XJywgJ1NOT1cnLCAnSEVBVlkgU05PVycsICdTTEVFVCcsICdMSUdIVCBTSE9XRVIgU0xFRVQnLCAnU0hPV0VSIFNMRUVUJywgJ0xJR0hUIFJBSU4gQU5EIFNOT1cnLCAnUkFJTiBBTkQgU05PVycsICdMSUdIVCBTSE9XRVIgU05PVycsICdTSE9XRVIgU05PVycsICdIRUFWWSBTSE9XRVIgU05PVycsICdNSVNUJywgJ1NNT0tFJywgJ0hBWkUnLCAnU0FORC8gRFVTVCBXSElSTFMnLCAnRk9HJywgJ1NBTkQnLCAnRFVTVCcsICdWT0xDQU5JQyBBU0gnLCAnU1FVQUxMUycsICdUT1JOQURPJywgJ0NMRUFSIFNLWScsICdGRVcgQ0xPVURTJywgJ1NDQVRURVJFRCBDTE9VRFMnLCAnQlJPS0VOIENMT1VEUycsICdPVkVSQ0FTVCBDTE9VRFMnXTtcclxuY29uc3Qgd2VhdGhlckFycmF5UnUgPSBbJ9CT0KDQntCX0JAg0KEg0JvQldCT0JrQmNCcINCU0J7QltCU0JXQnCcsICfQk9Cg0J7Ql9CQINChINCU0J7QltCU0JXQnCcsICfQk9Cg0J7Ql9CQINChINCh0JjQm9Cs0J3Qq9CcINCU0J7QltCU0JXQnCcsICfQm9CV0JPQmtCQ0K8g0JPQoNCe0JfQkCcsICfQk9Cg0J7Ql9CQJywgJ9Ch0JjQm9Cs0J3QkNCvINCT0KDQntCX0JAnLCAn0KDQktCQ0J3QkNCvINCT0KDQntCX0JAnLCAn0JPQoNCe0JfQkCDQoSDQnNCV0JvQmtCY0Jwg0JTQntCW0JTQldCcJywgJ9CT0KDQntCX0JAg0KEg0JzQldCb0JrQmNCcINCU0J7QltCU0JXQnCcsICfQk9Cg0J7Ql9CQINChINCc0JXQm9Ca0JjQnCDQlNCe0JbQlNCV0JwnLCAn0JPQoNCe0JfQkCDQoSDQodCY0JvQrNCd0KvQnCDQlNCe0JbQlNCV0JwnLCAn0JzQldCb0JrQmNCZINCU0J7QltCU0KwnLCAn0KHQmNCb0KzQndCr0Jkg0JTQntCW0JTQrCcsICfQodCY0JvQrNCd0KvQmSDQlNCe0JbQlNCsJywgJ9Ch0JjQm9Cs0J3Qq9CZINCU0J7QltCU0KwnLCAn0KHQmNCb0KzQndCr0Jkg0JTQntCW0JTQrCcsICfQodCY0JvQrNCd0KvQmSDQlNCe0JbQlNCsJywgJ9Ch0JjQm9Cs0J3Qq9CZINCU0J7QltCU0KwnLCAn0JTQntCW0JTQrCDQmCDQnNCe0KDQntCh0KwnLCAn0JTQntCW0JTQrCDQoSDQlNCe0JbQlNCV0JwnLCAnINCd0JXQkdCe0JvQrNCo0J7QmSDQlNCe0JbQlNCsJywgJ9Cj0JzQldCg0JXQndCd0KvQmSDQlNCe0JbQlNCsJywgJ9Ch0JjQm9Cs0J3Qq9CZINCU0J7QltCU0KwnLCAn0J7Qp9CV0J3QrCDQodCY0JvQrNCd0KvQmSDQlNCe0JbQlNCsJywgJ9Ct0JrQodCi0KDQldCc0JDQm9Cs0J3Qq9CZINCU0J7QltCU0KwnLCAn0JvQldCU0K/QndCe0Jkg0JTQntCW0JTQrCcsICfQm9CY0JLQldCd0Kwg0KEg0JjQndCi0JXQndCh0JjQktCd0KvQnCDQm9CY0JLQndCV0JwnLCAn0JvQmNCS0JXQndCsINChINCY0J3QotCV0J3QodCY0JLQndCr0Jwg0JvQmNCS0J3QldCcJywgJ9CU0J7QltCU0Kwg0KEg0JjQndCi0JXQndCh0JjQktCd0KvQnCDQm9CY0JLQndCV0JwnLCAn0KDQktCQ0J3Qq9CZINCb0JjQktCV0J3QrCcsICfQm9CV0JPQmtCY0Jkg0KHQndCV0JMnLCAn0KHQndCV0JMnLCAn0KHQmNCb0KzQndCr0Jkg0KHQndCV0JMnLCAn0JzQntCa0KDQq9CZINCh0J3QldCTJywgJ9CU0J7QltCU0Kwg0KHQniDQodCd0JXQk9Ce0JwnLCAn0JTQntCW0JTQrCDQodCeINCh0J3QldCT0J7QnCcsICfQm9CV0JPQmtCY0Jkg0JTQntCW0JTQrCDQodCeINCh0J3QldCT0J7QnCcsICfQlNCe0JbQlNCsINCh0J4g0KHQndCV0JPQntCcJywgJ9CU0J7QltCU0Kwg0KHQniDQodCd0JXQk9Ce0JwnLCAn0KHQmNCb0KzQndCr0Jkg0JTQntCW0JTQrCDQodCeINCh0J3QldCT0J7QnCcsICfQotCj0JzQkNCdJywgJ9CU0KvQnCcsICfQlNCr0JzQmtCQJywgJ9Cf0JXQodCn0JDQndCr0JUg0JLQmNCl0KDQmCcsICfQotCj0JzQkNCdJywgJ9Cf0JXQodCe0JonLCAn0J/Qq9Cb0KwnLCAn0JLQo9Cb0JrQkNCd0JjQp9CV0KHQmtCY0Jkg0J/QldCf0JXQmycsICfQqNCa0JLQkNCb0KsnLCAn0KLQntCg0J3QkNCU0J4nLCAn0KfQmNCh0KLQntCVINCd0JXQkdCeJywgJ9Cc0JDQm9CeINCe0JHQm9CQ0JrQntCSJywgJ9Cg0JDQodCh0JXQr9Cd0J3Qq9CVINCe0JHQm9CQ0JrQkCcsICfQoNCQ0JfQntCg0JLQkNCd0J3Qq9CVINCe0JHQm9CQ0JrQkCcsICfQn9CQ0KHQnNCj0KDQndCr0JUg0J7QkdCb0JDQmtCQJ107XHJcbmNvbnN0IHdlYXRoZXJBcnJheUJlID0gWyfQndCQ0JLQkNCb0KzQndCG0KbQkCDQlyDQm9CB0JPQmtCG0Jwg0JTQkNCW0JTQltCe0JwnLCAn0J3QkNCS0JDQm9Cs0J3QhtCm0JAg0Jcg0JTQkNCW0JTQltCe0JwnLCAn0J3QkNCS0JDQm9Cs0J3QhtCm0JAg0Jcg0JzQntCm0J3Qq9CcINCU0JDQltCU0JbQntCcJywgJ9Cb0IHQk9Ca0JDQryDQndCQ0JLQkNCb0KzQndCG0KbQkCcsICfQndCQ0JLQkNCb0KzQndCG0KbQkCcsICfQnNCe0KbQndCQ0K8g0J3QkNCS0JDQm9Cs0J3QhtCm0JAnLCAn0IbQoNCS0JDQndCQ0K8g0J3QkNCS0JDQm9Cs0J3QhtCm0JAnLCAn0J3QkNCS0JDQm9Cs0J3QhtCm0JAg0Jcg0JTQoNCe0JHQndCr0Jwg0JTQkNCW0JTQltCe0JwnLCAn0J3QkNCS0JDQm9Cs0J3QhtCm0JAg0Jcg0JTQoNCe0JHQndCr0Jwg0JTQkNCW0JTQltCe0JwnLCAn0J3QkNCS0JDQm9Cs0J3QhtCm0JAg0Jcg0JTQoNCe0JHQndCr0Jwg0JTQkNCW0JTQltCe0JwnLCAn0J3QkNCS0JDQm9Cs0J3QhtCm0JAg0Jcg0JzQntCm0J3Qq9CcINCU0JDQltCU0JbQntCcJywgJ9CU0KDQntCR0J3QqyDQlNCe0JbQlNCWJywgJ9Cc0J7QptCd0Ksg0JTQntCW0JTQlicsICfQnNCe0KbQndCrINCU0J7QltCU0JYnLCAn0JzQntCm0J3QqyDQlNCe0JbQlNCWJywgJ9Cc0J7QptCd0Ksg0JTQntCW0JTQlicsICfQnNCe0KbQndCrINCU0J7QltCU0JYnLCAn0JzQntCm0J3QqyDQlNCe0JbQlNCWJywgJ9Cc0J7QptCd0Ksg0JTQntCW0JTQlicsICfQlNCe0JbQlNCWINCGINCG0JzQltCQJywgJ9CU0J7QltCU0JYg0Jcg0JTQkNCW0JTQltCe0JwnLCAn0J3QldCS0K/Qm9CG0JrQhiDQlNCe0JbQlNCWJywgJyDQjtCc0JXQoNCQ0J3QqyDQlNCe0JbQlNCWJywgJ9Cc0J7QptCd0Ksg0JTQntCW0JTQlicsICfQktCV0JvQrNCc0IYg0JzQntCm0J3QqyDQlNCe0JbQlNCWJywgJ9Ct0JrQodCi0KDQrdCc0JDQm9Cs0J3QqyDQlNCe0JbQlNCWJywgJ9Cb0JXQlNCX0K/QndCrINCU0J7QltCU0JYnLCAn0JvQhtCS0JXQndCsINCXINCG0J3QotCt0J3QodCG0I7QndCr0Jwg0JvQhtCO0J3QldCcJywgJ9Cb0IbQktCV0J3QrCDQlyDQhtCd0KLQrdCd0KHQhtCO0J3Qq9CcINCb0IbQjtCd0JXQnCcsICfQlNCe0JbQlNCWINCXINCG0J3QotCt0J3QodCG0I7QndCr0Jwg0JvQhtCO0J3QldCcJywgJ9CG0KDQktCQ0J3QqyDQm9CG0JLQldCd0KwnLCAn0JvQgdCT0JrQhiDQodCd0JXQkycsICfQodCd0JXQkycsICfQnNCe0KbQndCrINCh0J3QldCTJywgJ9Cc0J7QmtCg0Ksg0KHQndCV0JMnLCAn0JTQntCW0JTQliDQodCQINCh0J3QldCT0JDQnCcsICfQlNCe0JbQlNCWINCh0JAg0KHQndCV0JPQkNCcJywgJ9Cb0IHQk9Ca0IYg0JTQntCW0JTQliDQodCQINCh0J3QldCT0JDQnCcsICfQlNCe0JbQlNCWINCh0JAg0KHQndCV0JPQkNCcJywgJ9CU0J7QltCU0JYg0KHQkCDQodCd0JXQk9CQ0JwnLCAn0JzQntCm0J3QqyDQlNCe0JbQlNCWINCh0JAg0KHQndCV0JPQkNCcJywgJ9Ci0KPQnNCQ0J0nLCAn0JTQq9CcJywgJ9Ch0JzQo9CT0JAnLCAn0J/Qr9Ch0KfQkNCd0KvQryDQktCG0KXQo9Cg0KsnLCAn0KLQo9Cc0JDQnScsICfQn9Cv0KHQntCaJywgJ9Cf0KvQmycsICfQktCj0JvQmtCQ0J3QhtCn0J3QqyDQn9Ce0J/QldCbJywgJ9Co0JrQktCQ0JvQqycsICfQotCQ0KDQndCQ0JTQkCcsICfQp9Cr0KHQotCQ0JUg0J3QldCR0JAnLCAn0JzQkNCb0JAg0JDQkdCb0J7QmtCQ0I4nLCAn0KDQkNCh0KHQldCv0J3Qq9CvINCQ0JHQm9Ce0JrQhicsICfQoNCQ0JfQkNCg0JLQkNCd0KvQryDQkNCR0JvQntCa0IYnLCAn0J/QkNCl0JzQo9Cg0J3Qq9CvINCQ0JHQm9Ce0JrQhiddO1xyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHRyYW5zbGF0ZVRleHQodGV4dCwgbGFuZykge1xyXG4gICBjb25zdCBrZXkgPSAndHJuc2wuMS4xLjIwMTkxMjE1VDEwNTMyM1ouNDY3MmEyZjA0ZTRhMWUwNi44N2Y5OTg4MzJmNGFjMDI5Yzc0MmFiOTBiYTJmZjJkNTU3ZjBlZWE3JztcclxuICAgY29uc3QgdXJsID0gYGh0dHBzOi8vdHJhbnNsYXRlLnlhbmRleC5uZXQvYXBpL3YxLjUvdHIuanNvbi90cmFuc2xhdGU/bGFuZz0ke2xhbmd9JnRleHQ9JHt0ZXh0fSZrZXk9JHtrZXl9YDtcclxuICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoKHVybCkudGhlbigocmVzKSA9PiByZXMuanNvbigpKTtcclxuICAgcmV0dXJuIGRhdGEudGV4dFswXTtcclxufVxyXG5cclxuLy8gd2luZG93Lm9ubG9hZCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuKGFzeW5jIGZ1bmN0aW9uKCkge1xyXG4gICBsZXQgbGFuZ3VhZ2U7XHJcbiAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2UnKSAhPT0gbnVsbCkge1xyXG4gICAgICBsYW5ndWFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZScpO1xyXG4gICB9IGVsc2Uge1xyXG4gICAgICBsYW5ndWFnZSA9ICdlbic7XHJcbiAgIH1cclxuICAgbGV0IGRlZ3JlZXNGb3JtYXQ7XHJcbiAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGVncmVlc0Zvcm1hdCcpICE9PSBudWxsKSB7XHJcbiAgICAgIGRlZ3JlZXNGb3JtYXQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGVncmVlc0Zvcm1hdCcpO1xyXG4gICB9IGVsc2Uge1xyXG4gICAgICBkZWdyZWVzRm9ybWF0ID0gJ2NlbHNpdXMnO1xyXG4gICB9XHJcblxyXG4gICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgIGNvbnN0IGdldFllYXJUaW1lID0gKCkgPT4geyAvLyBmdW5jdGlvbiB0aGF0IHJldHVybiB0aW1lIG9mIHRoZSB5ZWFyIChmLmUuIHdpbnRlcilcclxuICAgICAgY29uc3QgdGltZU9mVGhlWWVhck9iaiA9IHtcclxuICAgICAgICAgMTogJ3dpbnRlcicsXHJcbiAgICAgICAgIDI6ICd3aW50ZXInLFxyXG4gICAgICAgICAzOiAnc3ByaW5nJyxcclxuICAgICAgICAgNDogJ3NwcmluZycsXHJcbiAgICAgICAgIDU6ICdzcHJpbmcnLFxyXG4gICAgICAgICA2OiAnc3VtbWVyJyxcclxuICAgICAgICAgNzogJ3N1bW1lcicsXHJcbiAgICAgICAgIDg6ICdzdW1tZXInLFxyXG4gICAgICAgICA5OiAnYXV0dW1uJyxcclxuICAgICAgICAgMTA6ICdhdXR1bW4nLFxyXG4gICAgICAgICAxMTogJ2F1dHVtbicsXHJcbiAgICAgICAgIDEyOiAnd2ludGVyJyxcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgbnVtYmVyID0gbmV3IERhdGUoKS5nZXRNb250aCgpICsgMTtcclxuICAgICAgcmV0dXJuIHRpbWVPZlRoZVllYXJPYmpbbnVtYmVyXTtcclxuICAgfTtcclxuXHJcblxyXG4gICBjb25zdCBnZXREYXlUaW1lID0gKGhvdXJzKSA9PiAoaG91cnMgPCA2ID8gJ25pZ2h0JyA6IGhvdXJzIDwgMTIgPyAnbW9ybmluZycgOiBob3VycyA8IDE4ID8gJ2RheScgOiBob3VycyA8IDIzID8gJ2V2ZW5pbmcnIDogJ25pZ2h0Jyk7XHJcblxyXG4gICBhc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSguLi5hcmdzKSB7IC8vIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBjdXJyZW50IGNpdHkgdGltZVxyXG4gICAgICBsZXQgdGltZVpvbmU7XHJcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgIHRpbWVab25lID0gYXdhaXQgc2V0VGltZVpvbmUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgdGltZVpvbmUgPSBhd2FpdCBzZXRUaW1lWm9uZShhcmdzWzFdKTtcclxuICAgICAgICAgaWYgKHRpbWVab25lID09PSAxMDgwMCkge1xyXG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5ub3coKSk7XHJcbiAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMTA4MDAwMDAgKyB0aW1lWm9uZSAqIDEwMDApO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGFyZ3NbMF0gPT09ICdiZScpIHtcclxuICAgICAgICAgY29uc3Qgd2Vla0RheXMgPSBbJ9Cd0LTQtycsICfQn9C90LQnLCAn0JDRntGCJywgJ9Ch0YDQtCcsICfQp9GGJywgJ9Cf0YLQvScsICfQodCx0YInXTtcclxuICAgICAgICAgY29uc3QgbW9udGhBcnIgPSBbJ9Ch0YLQtNGD0LTQt9C10L3RjycsICfQm9GO0YLQsNCz0LAnLCAn0KHQsNC60LDQstGW0LrQsCcsICfQmtGA0LDRgdCw0LLRltC60LAnLCAn0JzQsNGPJywgJ9Cn0Y3RgNCy0LXQvdGPJywgJ9Cb0ZbQv9C10L3RjycsICfQltC90LjRntC90Y8nLCAn0JLQtdGA0LDRgdC90Y8nLCAn0JrQsNGB0YLRgNGL0YfQvdGW0LrQsCcsICfQm9GW0YHRgtCw0L/QsNC00LAnLCAn0KHQvdC10LbQvdGPJ107XHJcbiAgICAgICAgIHJldHVybiBgJHt3ZWVrRGF5c1tkYXRlLmdldERheSgpXX0sICR7ZGF0ZS5nZXREYXRlKCl9ICR7bW9udGhBcnJbZGF0ZS5nZXRNb250aCgpXX0sICR7ZGF0ZS5nZXRIb3VycygpfToke2RhdGUuZ2V0TWludXRlcygpfSBgO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgIHdlZWtkYXk6ICdzaG9ydCcsXHJcbiAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgIG1vbnRoOiAnbG9uZycsXHJcbiAgICAgICAgIGRheTogJ251bWVyaWMnLFxyXG4gICAgICAgICBob3VyMTI6IGZhbHNlXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IHRpbWUgPSBkYXRlLnRvTG9jYWxlU3RyaW5nKGFyZ3NbMF0sIG9wdGlvbnMpO1xyXG4gICAgICByZXR1cm4gdGltZTtcclxuICAgfVxyXG5cclxuLy8gTmFtZXMgb2YgbmV4dCB0aHJlZSBkYXlzXHJcbiAgIGNvbnN0IGdldEZ1dHVyZURhdGUgPSAoZGF5cywgbGFuZykgPT4ge1xyXG4gICAgICBsZXQgd2Vla0RheXM7XHJcbiAgICAgIHN3aXRjaCAobGFuZykge1xyXG4gICAgICAgICBjYXNlICdlbic6XHJcbiAgICAgICAgICAgIHdlZWtEYXlzID0gWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgY2FzZSAncnUnOlxyXG4gICAgICAgICAgICB3ZWVrRGF5cyA9IFsn0JLQvtGB0LrRgNC10YHQtdC90YzQtScsICfQn9C+0L3QtdC00LXQu9GM0L3QuNC6JywgJ9CS0YLQvtGA0L3QuNC6JywgJ9Ch0YDQtdC00LAnLCAn0KfQtdGC0LLQtdGA0LMnLCAn0J/Rj9GC0L3QuNGG0LAnLCAn0KHRg9Cx0LHQvtGC0LAnXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIGNhc2UgJ2JlJzpcclxuICAgICAgICAgICAgd2Vla0RheXMgPSBbJ9Cd0Y/QtNC30LXQu9GPJywgJ9Cf0LDQvdGP0LTQt9C10LvQsNC6JywgJ9CQ0Z7RgtC+0YDQsNC6JywgJ9Ch0LXRgNCw0LTQsCcsICfQp9Cw0YbQstC10YAnLCAn0J/Rj9GC0L3RltGG0LAnLCAn0KHRg9Cx0L7RgtCwJ107XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29ycmVjdCBsYW5ndWFnZScpO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBpID0gZGF0ZS5nZXREYXkoKSArIGRheXM7XHJcbiAgICAgIGlmIChpIDwgd2Vla0RheXMubGVuZ3RoKSB7XHJcbiAgICAgICAgIHJldHVybiB3ZWVrRGF5c1tpXTtcclxuICAgICAgfVxyXG4gICAgICB3aGlsZSAoaSA+PSB3ZWVrRGF5cy5sZW5ndGgpIHtcclxuICAgICAgICAgaSAtPSB3ZWVrRGF5cy5sZW5ndGg7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHdlZWtEYXlzW2ldO1xyXG4gICB9O1xyXG5cclxuLy8gU2V0IGxvY2F0aW9uXHJcbiAgIGFzeW5jIGZ1bmN0aW9uIGdlb2xvY2F0aW9uKCkge1xyXG4gICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9pcGluZm8uaW8vanNvbj90b2tlbj0ke3Rva2VufWA7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaCh1cmwpLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSk7XHJcbiAgICAgIHJldHVybiBkYXRhLmNpdHk7XHJcbiAgIH1cclxuXHJcbiAgIGFzeW5jIGZ1bmN0aW9uIHNldFRpbWVab25lKC4uLmFyZ3MpIHtcclxuICAgICAgaWYgKCFhcmdzLmxlbmd0aCkge1xyXG4gICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9pcGluZm8uaW8vanNvbj90b2tlbj0ke3Rva2VufWA7XHJcbiAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaCh1cmwpLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSk7XHJcbiAgICAgICAgIHJldHVybiBkYXRhLnRpbWV6b25lO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvZm9yZWNhc3Q/cT0ke2FyZ3NbMF19JnVuaXRzPW1ldHJpYyZBUFBJRD0ke2FwaUtleX1gO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2godXJsKS50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpO1xyXG4gICAgICByZXR1cm4gZGF0YS5jaXR5LnRpbWV6b25lO1xyXG4gICB9XHJcblxyXG4gICBhc3luYyBmdW5jdGlvbiBzZXRMaW5rVG9JbWFnZSguLi5hcmdzKSB7IC8vIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBiYWNrZ3JvdW5kIGltYWdlXHJcbiAgICAgIGNvbnN0IGFjY2Vzc0tleSA9ICdhNGU0NTkwOTRmZjMwZWNjY2E4MmRhODI1OGRkM2U0ZTRjZTkyM2Q1ODRhYjAxYmI0N2QxZTRkMzY0Mzg4NTkxJztcclxuICAgICAgbGV0IGNpdHk7XHJcbiAgICAgIGlmICghYXJncy5sZW5ndGgpIHtcclxuICAgICAgICAgY2l0eSA9IGF3YWl0IGdlb2xvY2F0aW9uKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGNpdHkgPSBhd2FpdCBzZXRXZWF0aGVyQnlDaXR5KGFyZ3NbMF0pO1xyXG4gICAgICAgICBjaXR5ID0gY2l0eS5jaXR5Lm5hbWU7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgeWVhclRpbWUgPSBhd2FpdCBnZXRZZWFyVGltZSgpO1xyXG4gICAgICBjb25zdCBkYXlUaW1lID0gZ2V0RGF5VGltZShuZXcgRGF0ZSgpLmdldEhvdXJzKCkpO1xyXG4gICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9yYW5kb20/cXVlcnk9JHt5ZWFyVGltZX0sJHtkYXlUaW1lfSwke2NpdHl9JmNsaWVudF9pZD0ke2FjY2Vzc0tleX1gO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2godXJsKS50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpO1xyXG4gICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gICAgICBib2R5LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJHtkYXRhLnVybHMuZnVsbH0mdz0xMTAwKWA7XHJcbiAgIH07XHJcblxyXG5cclxuICAgY29uc3QgdG9rZW4gPSAnODFiYzNiYmJjMWVkZWEnXHJcbiAgIGFzeW5jIGZ1bmN0aW9uIHNldFVzZXJMb2NhdGlvbiguLi5hcmdzKSB7IC8vIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB1c2VyJ3MgbG9jYXRpb24uXHJcbiAgICAgIGxldCB1cmw7XHJcbiAgICAgIGlmICghYXJncy5sZW5ndGgpIHtcclxuICAgICAgICAgdXJsID0gYGh0dHBzOi8vaXBpbmZvLmlvL2pzb24/dG9rZW49JHt0b2tlbn1gO1xyXG4gICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2godXJsKS50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpO1xyXG4gICAgICAgICByZXR1cm4gW2RhdGEuY2l0eSwgZGF0YS5jb3VudHJ5XTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgdXJsID0gYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9mb3JlY2FzdD9xPSR7YXJnc1swXX0mdW5pdHM9bWV0cmljJkFQUElEPSR7YXBpS2V5fWA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIHVybCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvZm9yZWNhc3Q/bGF0PSR7YXJnc1sxXX0mbG9uPSR7YXJnc1swXX0mdW5pdHM9bWV0cmljJkFQUElEPSR7YXBpS2V5fWA7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoKHVybCkudGhlbigocmVzKSA9PiByZXMuanNvbigpKTtcclxuICAgICAgcmV0dXJuIFtkYXRhLmNpdHkubmFtZSwgZGF0YS5jaXR5LmNvdW50cnldO1xyXG4gICB9XHJcblxyXG4gICBhc3luYyBmdW5jdGlvbiBzZXRXZWF0aGVyQnlDaXR5KC4uLmFyZ3MpIHsgLy8gZnVuY3Rpb24gdGhhdCByZXR1cm5zIHdlYXRoZXIgb24gMyBkYXlzIHVzaW5nIGNpdHkgbmFtZVxyXG4gICAgICBsZXQgY2l0eTtcclxuICAgICAgaWYgKCFhcmdzLmxlbmd0aCkge1xyXG4gICAgICAgICBjaXR5ID0gYXdhaXQgZ2VvbG9jYXRpb24oKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgY2l0eSA9IGFyZ3NbMF07XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9mb3JlY2FzdD9xPSR7Y2l0eX0mdW5pdHM9bWV0cmljJkFQUElEPSR7YXBpS2V5fWA7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaCh1cmwpLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSk7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICB9XHJcblxyXG4gICBhc3luYyBmdW5jdGlvbiBzZXRDaXR5VGVtcGVyYXR1cmUoLi4uYXJncykgeyAvLyBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGVtcGVyYXR1cmUgYW5kIHRlbXBlcmF0dXJlIGljb25zIGZvciAzIGRheXNcclxuICAgICAgbGV0IGNpdHk7XHJcbiAgICAgIGlmICghYXJncy5sZW5ndGgpIHtcclxuICAgICAgICAgY2l0eSA9IGF3YWl0IGdlb2xvY2F0aW9uKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIGNpdHkgPSBhcmdzWzBdO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvZm9yZWNhc3Q/cT0ke2NpdHl9JnVuaXRzPW1ldHJpYyZBUFBJRD0ke2FwaUtleX1gO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2godXJsKS50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpO1xyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgICBbTWF0aC5yb3VuZChkYXRhLmxpc3RbMF0ubWFpbi50ZW1wKSwgZGF0YS5saXN0WzBdLndlYXRoZXJbMF0uaWNvbl0sXHJcbiAgICAgICAgIFtNYXRoLnJvdW5kKGRhdGEubGlzdFs4XS5tYWluLnRlbXApLCBkYXRhLmxpc3RbOF0ud2VhdGhlclswXS5pY29uXSxcclxuICAgICAgICAgW01hdGgucm91bmQoZGF0YS5saXN0WzE2XS5tYWluLnRlbXApLCBkYXRhLmxpc3RbMTZdLndlYXRoZXJbMF0uaWNvbl0sXHJcbiAgICAgICAgIFtNYXRoLnJvdW5kKGRhdGEubGlzdFsyNF0ubWFpbi50ZW1wKSwgZGF0YS5saXN0WzI0XS53ZWF0aGVyWzBdLmljb25dLFxyXG4gICAgICBdO1xyXG4gICB9XHJcblxyXG4gICAvL1RvZGF5IFdlYXRoZXJcclxuICAgY29uc3QgYXBpS2V5ID0gJ2U3YzQzY2NkODRkZTEzYjQ5ODMzNmU3MTI0Y2E0N2RmJztcclxuICAgYXN5bmMgZnVuY3Rpb24gc2V0TGlua1RvV2VhdGhlciguLi5hcmdzKSB7XHJcbiAgICAgIGxldCBjaXR5O1xyXG4gICAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgIGNpdHkgPSBhd2FpdCBnZW9sb2NhdGlvbigpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBjaXR5ID0gYXJnc1swXTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L2ZvcmVjYXN0P3E9JHtjaXR5fSZ1bml0cz1tZXRyaWMmQVBQSUQ9JHthcGlLZXl9YDtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoKHVybCkudGhlbigocmVzKSA9PiByZXMuanNvbigpKTtcclxuICAgICAgY29uc3QgY2Vsc2l1c1RlbXAgPSBkYXRhLmxpc3RbMF0ubWFpbi50ZW1wO1xyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgIGh1bWlkaXR5XHJcbiAgICAgIH0gPSBkYXRhLmxpc3RbMF0ubWFpbjtcclxuICAgICAgY29uc3Qgd2luZFNwZWVkID0gZGF0YS5saXN0WzBdLndpbmQuc3BlZWQ7XHJcbiAgICAgIGNvbnN0IGZlZWxzTGlrZVRlbXAgPSBjZWxzaXVzVGVtcCAtIDAuNCAqIChjZWxzaXVzVGVtcCAtIDEwKSAqICgxIC0gaHVtaWRpdHkgLyAxMDApO1xyXG4gICAgICByZXR1cm4gW2RhdGEubGlzdFswXS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLCBNYXRoLnJvdW5kKGZlZWxzTGlrZVRlbXApLCBNYXRoLnJvdW5kKHdpbmRTcGVlZCksIGh1bWlkaXR5XTtcclxuICAgfVxyXG5cclxuXHJcbiAgIGNvbnN0IGNvbnZlcnRERFRvRE1TID0gKGRkKSA9PiB7XHJcbiAgICAgIGNvbnN0IGRlZyA9IGRkIHwgMDsgLy8gdHJ1bmNhdGUgZGQgdG8gZ2V0IGRlZ3JlZXNcclxuICAgICAgY29uc3QgZnJhYyA9IE1hdGguYWJzKGRkIC0gZGVnKTsgLy8gZ2V0IGZyYWN0aW9uYWwgcGFydFxyXG4gICAgICBjb25zdCBtaW4gPSAoZnJhYyAqIDYwKSB8IDA7IC8vIG11bHRpcGx5IGZyYWN0aW9uIGJ5IDYwIGFuZCB0cnVuY2F0ZVxyXG4gICAgICByZXR1cm4gYCR7ZGVnfcKwJHttaW59J2A7XHJcbiAgIH07XHJcblxyXG5cclxuICAgYXN5bmMgZnVuY3Rpb24gc2V0Q29vcmRpbmF0ZXMoY2l0eSkge1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgc2V0V2VhdGhlckJ5Q2l0eShjaXR5KTtcclxuICAgICAgaWYgKGRhdGEuY29kID09PSAnNDA0JyB8fCBkYXRhLmNvZCA9PT0gJzQwMCcpIHtcclxuICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGxuZyA9IGRhdGEuY2l0eS5jb29yZC5sb247XHJcbiAgICAgIGNvbnN0IGxhdCA9IGRhdGEuY2l0eS5jb29yZC5sYXQ7XHJcbiAgICAgIHJldHVybiBbbG5nLCBsYXRdO1xyXG4gICB9XHJcblxyXG5cclxuICAgYXN5bmMgZnVuY3Rpb24gc2hvd09uVGhlTWFwKC4uLmFyZ3MpIHtcclxuICAgICAgbGV0IGxuZztcclxuICAgICAgbGV0IGxhdDtcclxuICAgICAgaWYgKCFhcmdzLmxlbmd0aCkge1xyXG4gICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgc2V0V2VhdGhlckJ5Q2l0eSgpO1xyXG4gICAgICAgICBsbmcgPSBkYXRhLmNpdHkuY29vcmQubG9uO1xyXG4gICAgICAgICBsYXQgPSBkYXRhLmNpdHkuY29vcmQubGF0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBsbmcgPSBhcmdzWzBdO1xyXG4gICAgICAgICBsYXQgPSBhcmdzWzFdO1xyXG4gICAgICB9XHJcbiAgICAgIG1hcGJveGdsLmFjY2Vzc1Rva2VuID0gJ3BrLmV5SjFJam9pWVd4cFozVnlZbUZ1YjNZNU5TSXNJbUVpT2lKamF6UXdNVGMwZEcwd09YZDNNMnh4ZFhRM05UWXpkM0pwSW4wLkxlYkFkUGFiaXVlSHBId0JMQVowNEEnO1xyXG4gICAgICBjb25zdCBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHtcclxuICAgICAgICAgY29udGFpbmVyOiAnbWFwJywgLy8gY29udGFpbmVyIGlkXHJcbiAgICAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMScsIC8vIHN0eWxlc2hlZXQgbG9jYXRpb25cclxuICAgICAgICAgY2VudGVyOiBbbG5nLCBsYXRdLCAvLyBzdGFydGluZyBwb3NpdGlvbiBbbG5nLCBsYXRdXHJcbiAgICAgICAgIHpvb206IDksIC8vIHN0YXJ0aW5nIHpvb21cclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBtYXA7XHJcbiAgIH1cclxuXHJcblxyXG5cclxuICAgY29uc3QgY29udGVudFdhcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQtd3JhcHBlcicpO1xyXG4gICBjb25zdCBodG1sQ29udGVudCA9IGAke2NvbnRyb2xCbG9ja308ZGl2IGNsYXNzPVwid2VhdGhlci1hbmQtbWFwXCI+PGRpdiBjbGFzcz1cIndlYXRoZXItZm9yLTQtZGF5c1wiPiR7d2VhdGhlckZvclRvZGF5QmxvY2t9JHt3ZWF0aGVyRm9yM0RheXNCbG9ja308L2Rpdj4ke21hcEJsb2NrfTwvZGl2PmA7XHJcbiAgIGNvbnRlbnRXYXJhcHBlci5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sQ29udGVudCk7XHJcbiAgIGNvbnN0IGxvYWRCZ0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkLWJnJyk7XHJcbiAgIGNvbnN0IGxvY2F0aW9uU3RyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndlYXRoZXItZm9yLXRvZGF5IGgyJyk7XHJcbiAgIGNvbnN0IGN1cnJlbnRUaW1lU3RyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndlYXRoZXItZm9yLXRvZGF5IGg0Jyk7XHJcbiAgIGNvbnN0IHRlbXBlcmF0dXJlRm9yVG9kYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVtcGVyYXR1cmUgcCcpO1xyXG4gICBjb25zdCB0ZW1wZXJhdHVyRm9yVG9kYXlJbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVtcGVyYXR1cmUgaW1nJyk7XHJcbiAgIGNvbnN0IHdlYXRoZXJGb3JUb2RheURlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlc2NyaXB0aW9uJyk7XHJcbiAgIGNvbnN0IGNoYW5nZUNvbG9ySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiY29sb3JcIl0nKTtcclxuICAgY29uc3Qgd2VhdGhlckZvclRvZGF5RmVlbHNMaWtlVGVtcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVscy1saWtlLXRlbXAnKTtcclxuICAgY29uc3Qgd2VhdGhlckZvclRvZGF5V2luZFNwZWVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndpbmQtc3BlZWQnKTtcclxuICAgY29uc3QgY2Vsc2l1c0Zvcm1hdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjZWxzaXVzJyk7XHJcbiAgIGNvbnN0IHdlYXRoZXJGb3JUb2RheUh1bWlkaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmh1bWlkaXR5Jyk7XHJcbiAgIGNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlYXJjaC1pbnB1dCcpO1xyXG4gICBjb25zdCBzZWFyY2hCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLWJ0bicpO1xyXG4gICBjb25zdCBsYW5ndWFnZUJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2VsZWN0Jyk7XHJcbiAgIGNvbnN0IG1pY3JvSW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pY3JvJyk7XHJcbiAgIGNvbnN0IHJlY29nbml0aW9uID0gbmV3IHdlYmtpdFNwZWVjaFJlY29nbml0aW9uKCk7XHJcbiAgIGxldCBpc01pY3JvID0gZmFsc2U7XHJcbiAgIHJlY29nbml0aW9uLmludGVyaW1SZXN1bHRzID0gZmFsc2U7XHJcbiAgIGxldCBbbG5nLCBsYXRdID0gYXdhaXQgc2V0Q29vcmRpbmF0ZXMoYXdhaXQgZ2VvbG9jYXRpb24oKSk7XHJcblxyXG4gICBsYW5ndWFnZUJsb2NrLnZhbHVlID0gbGFuZ3VhZ2U7XHJcbiAgIGxldCBmZWVsc0xpa2VUZXh0O1xyXG4gICBsZXQgd2luZFRleHQ7XHJcbiAgIGxldCBodW1pZGl0eVRleHQ7XHJcbiAgIGxldCBzZWFyY2hUZXh0O1xyXG4gICBsZXQgc3BlZWQ7XHJcbiAgIGxldCBsb25naXR1ZGU7XHJcbiAgIGxldCBsYXRpdHVkZTtcclxuXHJcblxyXG4gICBsZXQgY3VycmVudFRlbXBlcmF0dXJlID0gYXdhaXQgc2V0Q2l0eVRlbXBlcmF0dXJlKCk7IC8vIGFycmF5IHRoYXQgY29udGFpbnMgdGVtcGVyYXR1cmUgYW5kIGljb25zIG9uIGN1cnJlbnQgYW5kIG5leHQgMyBkYXlzXHJcbiAgIGNvbnN0IHNldFRlbXBlcmF0dXJlRm9yM0RheXMgPSAoKSA9PiB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDM7IGkgKz0gMSkge1xyXG4gICAgICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLndlYXRoZXItZm9yLTMtZGF5c19lbGVtZW50LSR7aX1gKTtcclxuICAgICAgICAgZWxlbS5maXJzdEVsZW1lbnRDaGlsZC5pbm5lclRleHQgPSBnZXRGdXR1cmVEYXRlKGksIGxhbmd1YWdlKTtcclxuICAgICAgICAgaWYgKGRlZ3JlZXNGb3JtYXQgPT09ICdjZWxzaXVzJykge1xyXG4gICAgICAgICAgICBlbGVtLmxhc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJUZXh0ID0gYCR7Y3VycmVudFRlbXBlcmF0dXJlW2ldWzBdfcKwYDtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWxlbS5sYXN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkLmlubmVyVGV4dCA9IGAke01hdGgucm91bmQoKDkgLyA1KSAqIGN1cnJlbnRUZW1wZXJhdHVyZVtpXVswXSArIDMyKX3CsGA7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxlbS5sYXN0RWxlbWVudENoaWxkLmxhc3RFbGVtZW50Q2hpbGQuc2V0QXR0cmlidXRlKCdzcmMnLCBgaHR0cDovL29wZW53ZWF0aGVybWFwLm9yZy9pbWcvd24vJHtjdXJyZW50VGVtcGVyYXR1cmVbaV1bMV19QDJ4LnBuZ2ApO1xyXG4gICAgICB9XHJcbiAgIH07XHJcbiAgIHNldExpbmtUb0ltYWdlKCk7XHJcbiAgIHRyYW5zbGF0ZVRleHQoJ01pbnNrLCBCZWxhcnVzJywgJ3J1Jyk7XHJcbiAgIHNldFRlbXBlcmF0dXJlRm9yM0RheXMoKTtcclxuICAgbGV0IHdlYXRoZXJEZXNjcmlwdGlvbjtcclxuICAgY29uc3Qgc2V0d2VhdGhlckRlc2NyaXB0aW9uID0gYXN5bmMgKGNpdHkpID0+IHtcclxuICAgICAgd2VhdGhlckRlc2NyaXB0aW9uID0gYXdhaXQgc2V0TGlua1RvV2VhdGhlcihjaXR5KTtcclxuICAgICAgd2VhdGhlckZvclRvZGF5RGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gd2VhdGhlckRlc2NyaXB0aW9uWzBdO1xyXG4gICAgICBpZiAoZGVncmVlc0Zvcm1hdCA9PT0gJ2NlbHNpdXMnKSB7XHJcbiAgICAgICAgIHdlYXRoZXJGb3JUb2RheUZlZWxzTGlrZVRlbXAuaW5uZXJUZXh0ID0gYCR7ZmVlbHNMaWtlVGV4dH06ICR7d2VhdGhlckRlc2NyaXB0aW9uWzFdfcKwYDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgd2VhdGhlckZvclRvZGF5RmVlbHNMaWtlVGVtcC5pbm5lclRleHQgPSBgJHtmZWVsc0xpa2VUZXh0fTogJHtNYXRoLnJvdW5kKCg5IC8gNSkgKiB3ZWF0aGVyRGVzY3JpcHRpb25bMV0gKyAzMil9wrBgO1xyXG4gICAgICB9XHJcbiAgICAgIHdlYXRoZXJGb3JUb2RheVdpbmRTcGVlZC5pbm5lclRleHQgPSBgJHt3aW5kVGV4dH06ICR7d2VhdGhlckRlc2NyaXB0aW9uWzJdfSAke3NwZWVkfWA7XHJcbiAgICAgIHdlYXRoZXJGb3JUb2RheUh1bWlkaXR5LmlubmVyVGV4dCA9IGAke2h1bWlkaXR5VGV4dH06ICR7d2VhdGhlckRlc2NyaXB0aW9uWzNdfSVgO1xyXG4gICB9O1xyXG4gICBhd2FpdCBzZXR3ZWF0aGVyRGVzY3JpcHRpb24oYXdhaXQgc2V0VXNlckxvY2F0aW9uKCkpO1xyXG4gICBsZXQgbG9jYXRpb25BcnJheSA9IGF3YWl0IHNldFVzZXJMb2NhdGlvbigpO1xyXG4gICBsZXQgY2l0eSA9IGxvY2F0aW9uQXJyYXlbMF07XHJcbiAgIGNvbnN0IHN3aXRjaFNpdGVMYW5ndWFnZSA9IGFzeW5jICgpID0+IHtcclxuICAgICAgbGV0IHdlYXRoZXJEZXNjcmlwdGlvblZhcmlhYmxlO1xyXG4gICAgICBzd2l0Y2ggKGxhbmd1YWdlKSB7XHJcbiAgICAgICAgIGNhc2UgJ2VuJzpcclxuICAgICAgICAgICAgZmVlbHNMaWtlVGV4dCA9ICdGZWVscyBsaWtlJztcclxuICAgICAgICAgICAgd2luZFRleHQgPSAnV2luZCc7XHJcbiAgICAgICAgICAgIGh1bWlkaXR5VGV4dCA9ICdIdW1pZGl0eSc7XHJcbiAgICAgICAgICAgIHNlYXJjaFRleHQgPSAnU2VhcmNoJztcclxuICAgICAgICAgICAgc3BlZWQgPSAnbS9zJztcclxuICAgICAgICAgICAgbG9uZ2l0dWRlID0gJ0xvbmdpdHVkZSc7XHJcbiAgICAgICAgICAgIGxhdGl0dWRlID0gJ0xhdGl0dWRlJztcclxuICAgICAgICAgICAgd2VhdGhlckRlc2NyaXB0aW9uVmFyaWFibGUgPSB3ZWF0aGVyRGVzY3JpcHRpb25bMF07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICBjYXNlICdydSc6XHJcbiAgICAgICAgICAgIGZlZWxzTGlrZVRleHQgPSAn0KfRg9Cy0YHRgtCy0YPQtdGC0YHRjyDQutCw0LonO1xyXG4gICAgICAgICAgICB3aW5kVGV4dCA9ICfQktC10YLQtdGAJztcclxuICAgICAgICAgICAgaHVtaWRpdHlUZXh0ID0gJ9CS0LvQsNC20L3QvtGB0YLRjCc7XHJcbiAgICAgICAgICAgIHNlYXJjaFRleHQgPSAn0J3QsNC50YLQuCc7XHJcbiAgICAgICAgICAgIHNwZWVkID0gJ9C8L9GBJztcclxuICAgICAgICAgICAgbG9uZ2l0dWRlID0gJ9CU0L7Qu9Cz0L7RgtCwJztcclxuICAgICAgICAgICAgbGF0aXR1ZGUgPSAn0KjQuNGA0L7RgtCwJztcclxuICAgICAgICAgICAgd2VhdGhlckRlc2NyaXB0aW9uVmFyaWFibGUgPSB3ZWF0aGVyQXJyYXlSdVt3ZWF0aGVyQXJyYXlFbmcuaW5kZXhPZih3ZWF0aGVyRGVzY3JpcHRpb25bMF0udG9VcHBlckNhc2UoKSldO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgY2FzZSAnYmUnOlxyXG4gICAgICAgICAgICBmZWVsc0xpa2VUZXh0ID0gJ9CQ0LTRh9GD0LLQsNC10YbQsNCwINGP0LonO1xyXG4gICAgICAgICAgICB3aW5kVGV4dCA9ICfQktC10YbQtdGAJztcclxuICAgICAgICAgICAgaHVtaWRpdHlUZXh0ID0gJ9CS0ZbQu9GM0LPQvtGC0L3QsNGB0YbRjCc7XHJcbiAgICAgICAgICAgIHNlYXJjaFRleHQgPSAn0JfQvdCw0LnRgdGG0ZYnO1xyXG4gICAgICAgICAgICBzcGVlZCA9ICfQvC/RgSc7XHJcbiAgICAgICAgICAgIGxvbmdpdHVkZSA9ICfQlNCw0Z7Qs9Cw0YLQsCc7XHJcbiAgICAgICAgICAgIGxhdGl0dWRlID0gJ9Co0YvRgNCw0YLQsCc7XHJcbiAgICAgICAgICAgIHdlYXRoZXJEZXNjcmlwdGlvblZhcmlhYmxlID0gd2VhdGhlckFycmF5QmVbd2VhdGhlckFycmF5RW5nLmluZGV4T2Yod2VhdGhlckRlc2NyaXB0aW9uWzBdLnRvVXBwZXJDYXNlKCkpXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IGxhbmd1YWdlJyk7XHJcbiAgICAgIH1cclxuICAgICAgbG9jYXRpb25TdHIuaW5uZXJUZXh0ID0gYXdhaXQgdHJhbnNsYXRlVGV4dChsb2NhdGlvblN0ci5pbm5lclRleHQsIGxhbmd1YWdlKTtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlYXJjaC1idG4gcCcpLmlubmVyVGV4dCA9IHNlYXJjaFRleHQ7XHJcbiAgICAgIHdlYXRoZXJGb3JUb2RheURlc2NyaXB0aW9uLmlubmVyVGV4dCA9IHdlYXRoZXJEZXNjcmlwdGlvblZhcmlhYmxlO1xyXG4gICAgICB3ZWF0aGVyRm9yVG9kYXlGZWVsc0xpa2VUZW1wLmlubmVyVGV4dCA9IGAke2ZlZWxzTGlrZVRleHR9OiAke3dlYXRoZXJEZXNjcmlwdGlvblsxXX3CsGA7XHJcbiAgICAgIHdlYXRoZXJGb3JUb2RheVdpbmRTcGVlZC5pbm5lclRleHQgPSBgJHt3aW5kVGV4dH06ICR7d2VhdGhlckRlc2NyaXB0aW9uWzJdfSAke3NwZWVkfWA7XHJcbiAgICAgIHdlYXRoZXJGb3JUb2RheUh1bWlkaXR5LmlubmVyVGV4dCA9IGAke2h1bWlkaXR5VGV4dH06ICR7d2VhdGhlckRlc2NyaXB0aW9uWzNdfSVgO1xyXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAzOyBpICs9IDEpIHtcclxuICAgICAgICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC53ZWF0aGVyLWZvci0zLWRheXNfZWxlbWVudC0ke2l9YCk7XHJcbiAgICAgICAgIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJUZXh0ID0gZ2V0RnV0dXJlRGF0ZShpLCBsYW5ndWFnZSk7XHJcbiAgICAgIH1cclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvbicpLmlubmVyVGV4dCA9IGAke2xvbmdpdHVkZX06ICR7Y29udmVydEREVG9ETVMobG5nKX1gO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGF0JykuaW5uZXJUZXh0ID0gYCR7bGF0aXR1ZGV9OiAke2NvbnZlcnRERFRvRE1TKGxhdCl9YDtcclxuICAgICAgY3VycmVudFRpbWVTdHIuaW5uZXJUZXh0ID0gYXdhaXQgZ2V0Q3VycmVudFRpbWUobGFuZ3VhZ2UsIGNpdHkpO1xyXG4gICB9O1xyXG4gICBsZXQgY291bnRyeUNvZGUgPSBsb2NhdGlvbkFycmF5WzFdO1xyXG4gICBjdXJyZW50VGltZVN0ci5pbm5lclRleHQgPSBhd2FpdCBnZXRDdXJyZW50VGltZShsYW5ndWFnZSk7XHJcbiAgIGxvY2F0aW9uU3RyLmlubmVyVGV4dCA9IGAke2NpdHl9LCAke2Z1bGxDb3VudHJ5TmFtZXNbY291bnRyeUNvZGVdfWA7IC8vIHNldCB1c2VyJ3MgY291bnRyeSBhbmQgY2l0eVxyXG4gICBzd2l0Y2hTaXRlTGFuZ3VhZ2UoKTtcclxuICAgaWYgKGRlZ3JlZXNGb3JtYXQgPT09ICdjZWxzaXVzJykge1xyXG4gICAgICB0ZW1wZXJhdHVyZUZvclRvZGF5LmlubmVyVGV4dCA9IGAke2N1cnJlbnRUZW1wZXJhdHVyZVswXVswXX3CsGA7XHJcbiAgICAgIGNlbHNpdXNGb3JtYXQuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgIHRlbXBlcmF0dXJlRm9yVG9kYXkuaW5uZXJUZXh0ID0gYCR7TWF0aC5yb3VuZCgoOSAvIDUpICogY3VycmVudFRlbXBlcmF0dXJlWzBdWzBdICsgMzIpfcKwYDtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhaHJlbmhlaXQnKS5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgfVxyXG4gICB0ZW1wZXJhdHVyRm9yVG9kYXlJbWcuc2V0QXR0cmlidXRlKCdzcmMnLCBgaHR0cDovL29wZW53ZWF0aGVybWFwLm9yZy9pbWcvd24vJHtjdXJyZW50VGVtcGVyYXR1cmVbMF1bMV19QDJ4LnBuZ2ApO1xyXG4gICBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGN1cnJlbnRUaW1lU3RyLmlubmVyVGV4dCA9IGF3YWl0IGdldEN1cnJlbnRUaW1lKGxhbmd1YWdlLCBjaXR5KTtcclxuICAgfSwgNjAwMDApO1xyXG4gICBzaG93T25UaGVNYXAoKTtcclxuICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvbicpLmlubmVyVGV4dCA9IGAke2xvbmdpdHVkZX06ICR7Y29udmVydEREVG9ETVMobG5nKX1gO1xyXG4gICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGF0JykuaW5uZXJUZXh0ID0gYCR7bGF0aXR1ZGV9OiAke2NvbnZlcnRERFRvRE1TKGxhdCl9YDtcclxuXHJcbiAgIHNlYXJjaEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcclxuICAgICAgaWYgKGlzTWljcm8pIHtcclxuICAgICAgICAgbWljcm9JbWcuc2V0QXR0cmlidXRlKCdzcmMnLCAnc3JjL2ljb25zL21pY3JvZm9uLnBuZycpO1xyXG4gICAgICAgICByZWNvZ25pdGlvbi5zdG9wKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGF3YWl0IHNldENvb3JkaW5hdGVzKHNlYXJjaElucHV0LnZhbHVlKSA9PT0gLTEpIHtcclxuICAgICAgICAgc2VhcmNoSW5wdXQudmFsdWUgPSBsYW5ndWFnZSA9PT0gJ2VuJyA/ICdJbmNvcnJlY3QgY2l0eSBuYW1lJyA6IGxhbmd1YWdlID09PSAncnUnID8gJ9Cd0LXQv9GA0LDQstC40LvRjNC90L7QtSDQvdCw0LfQstCw0L3QuNC1INCz0L7RgNC+0LTQsCcgOiAn0J3Rj9C/0YDQsNCy0ZbQu9GM0L3QsNGPINC90LDQt9Cy0LAg0LPQvtGA0LDQtNCwJztcclxuICAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIFtsbmcsIGxhdF0gPSBhd2FpdCBzZXRDb29yZGluYXRlcyhzZWFyY2hJbnB1dC52YWx1ZSk7XHJcbiAgICAgIHNlYXJjaElucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgIHNob3dPblRoZU1hcChsbmcsIGxhdCk7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb24nKS5pbm5lclRleHQgPSBgJHtsb25naXR1ZGV9OiAke2NvbnZlcnRERFRvRE1TKGxuZyl9YDtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxhdCcpLmlubmVyVGV4dCA9IGAke2xhdGl0dWRlfTogJHtjb252ZXJ0RERUb0RNUyhsYXQpfWA7XHJcbiAgICAgIGxvY2F0aW9uQXJyYXkgPSBhd2FpdCBzZXRVc2VyTG9jYXRpb24obG5nLCBsYXQpO1xyXG4gICAgICBjaXR5ID0gbG9jYXRpb25BcnJheVswXTtcclxuICAgICAgY291bnRyeUNvZGUgPSBsb2NhdGlvbkFycmF5WzFdO1xyXG4gICAgICBjdXJyZW50VGltZVN0ci5pbm5lclRleHQgPSBhd2FpdCBnZXRDdXJyZW50VGltZShsYW5ndWFnZSwgY2l0eSk7XHJcbiAgICAgIHNldExpbmtUb0ltYWdlKGNpdHkpO1xyXG4gICAgICBjdXJyZW50VGVtcGVyYXR1cmUgPSBhd2FpdCBzZXRDaXR5VGVtcGVyYXR1cmUoY2l0eSk7XHJcbiAgICAgIGxvY2F0aW9uU3RyLmlubmVyVGV4dCA9IGAke2NpdHl9LCAke2Z1bGxDb3VudHJ5TmFtZXNbY291bnRyeUNvZGVdfWA7XHJcbiAgICAgIGlmIChkZWdyZWVzRm9ybWF0ID09PSAnY2Vsc2l1cycpIHtcclxuICAgICAgICAgdGVtcGVyYXR1cmVGb3JUb2RheS5pbm5lclRleHQgPSBgJHtjdXJyZW50VGVtcGVyYXR1cmVbMF1bMF19wrBgO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICB0ZW1wZXJhdHVyZUZvclRvZGF5LmlubmVyVGV4dCA9IGAke01hdGgucm91bmQoKDkgLyA1KSAqIGN1cnJlbnRUZW1wZXJhdHVyZVswXVswXSArIDMyKX3CsGA7XHJcbiAgICAgIH1cclxuICAgICAgdGVtcGVyYXR1ckZvclRvZGF5SW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgYGh0dHA6Ly9vcGVud2VhdGhlcm1hcC5vcmcvaW1nL3duLyR7Y3VycmVudFRlbXBlcmF0dXJlWzBdWzFdfUAyeC5wbmdgKTtcclxuICAgICAgYXdhaXQgc2V0d2VhdGhlckRlc2NyaXB0aW9uKGNpdHkpO1xyXG4gICAgICBzZXRUZW1wZXJhdHVyZUZvcjNEYXlzKCk7XHJcbiAgICAgIHN3aXRjaFNpdGVMYW5ndWFnZSgpO1xyXG4gICB9KTtcclxuICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbbmFtZT1cImRlZ3JlZXNcIl0nKS5mb3JFYWNoKChlKSA9PiB7XHJcbiAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICBpZiAoY2Vsc2l1c0Zvcm1hdC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgIGRlZ3JlZXNGb3JtYXQgPSAnY2Vsc2l1cyc7XHJcbiAgICAgICAgICAgIHRlbXBlcmF0dXJlRm9yVG9kYXkuaW5uZXJUZXh0ID0gYCR7TWF0aC5yb3VuZCgoNSAvIDkpICogKHRlbXBlcmF0dXJlRm9yVG9kYXkuaW5uZXJUZXh0LnN1YnN0cigwLCB0ZW1wZXJhdHVyZUZvclRvZGF5LmlubmVyVGV4dC5sZW5ndGggLSAxKSAtIDMyKSl9wrBgO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAzOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC53ZWF0aGVyLWZvci0zLWRheXNfZWxlbWVudC0ke2l9YCk7XHJcbiAgICAgICAgICAgICAgIGVsZW0ubGFzdEVsZW1lbnRDaGlsZC5maXJzdEVsZW1lbnRDaGlsZC5pbm5lclRleHQgPSBgJHtNYXRoLnJvdW5kKCg1IC8gOSkgKiAoZWxlbS5sYXN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkLmlubmVyVGV4dC5zdWJzdHIoMCwgZWxlbS5sYXN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkLmlubmVyVGV4dC5sZW5ndGggLSAxKSAtIDMyKSl9wrBgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdlYXRoZXJGb3JUb2RheUZlZWxzTGlrZVRlbXAuaW5uZXJUZXh0ID0gYCR7ZmVlbHNMaWtlVGV4dH06ICR7d2VhdGhlckRlc2NyaXB0aW9uWzFdfcKwYDtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGVncmVlc0Zvcm1hdCA9ICdmYWhyZW5oZWl0JztcclxuICAgICAgICAgICAgdGVtcGVyYXR1cmVGb3JUb2RheS5pbm5lclRleHQgPSBgJHtNYXRoLnJvdW5kKCg5IC8gNSkgKiB0ZW1wZXJhdHVyZUZvclRvZGF5LmlubmVyVGV4dC5zdWJzdHIoMCwgdGVtcGVyYXR1cmVGb3JUb2RheS5pbm5lclRleHQubGVuZ3RoIC0gMSkgKyAzMil9wrBgO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAzOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC53ZWF0aGVyLWZvci0zLWRheXNfZWxlbWVudC0ke2l9YCk7XHJcbiAgICAgICAgICAgICAgIGVsZW0ubGFzdEVsZW1lbnRDaGlsZC5maXJzdEVsZW1lbnRDaGlsZC5pbm5lclRleHQgPSBgJHtNYXRoLnJvdW5kKCg5IC8gNSkgKiBlbGVtLmxhc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJUZXh0LnN1YnN0cigwLCBlbGVtLmxhc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJUZXh0Lmxlbmd0aCAtIDEpICsgMzIpfcKwYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3ZWF0aGVyRm9yVG9kYXlGZWVsc0xpa2VUZW1wLmlubmVyVGV4dCA9IGAke2ZlZWxzTGlrZVRleHR9OiAke01hdGgucm91bmQoKDkgLyA1KSAqIHdlYXRoZXJEZXNjcmlwdGlvblsxXSArIDMyKX3CsGA7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgIH0pO1xyXG4gICBsYW5ndWFnZUJsb2NrLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZUJsb2NrLnZhbHVlO1xyXG4gICAgICBzd2l0Y2hTaXRlTGFuZ3VhZ2UoKTtcclxuICAgfSk7XHJcbiAgIGxvYWRCZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgLy8gY3JlYXRlcyBuZXcgYmFja2dyb3VuZCBpbWFnZVxyXG4gICAgICBzZXRMaW5rVG9JbWFnZShjaXR5KTtcclxuICAgfSk7XHJcbiAgIGNoYW5nZUNvbG9ySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jykuc3R5bGUuY29sb3IgPSBjaGFuZ2VDb2xvcklucHV0LnZhbHVlO1xyXG4gICAgICBsYW5ndWFnZUJsb2NrLnN0eWxlLmNvbG9yID0gY2hhbmdlQ29sb3JJbnB1dC52YWx1ZTtcclxuICAgICAgc2VhcmNoSW5wdXQuc3R5bGUuY29sb3IgPSBjaGFuZ2VDb2xvcklucHV0LnZhbHVlO1xyXG4gICB9KTtcclxuXHJcblxyXG4gICBtaWNyb0ltZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgaXNNaWNybyA9ICFpc01pY3JvO1xyXG4gICAgICBpZiAoaXNNaWNybykge1xyXG4gICAgICAgICBtaWNyb0ltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsICdzcmMvaWNvbnMvbWljcm9fYWN0aXZlLnBuZycpLFxyXG4gICAgICAgICByZWNvZ25pdGlvbi5zdGFydCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICBtaWNyb0ltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsICdzcmMvaWNvbnMvbWljcm9mb24ucG5nJyk7XHJcbiAgICAgICAgIHJlY29nbml0aW9uLmFib3J0KCk7XHJcbiAgICAgIH1cclxuICAgfSk7XHJcblxyXG4gICByZWNvZ25pdGlvbi5hZGRFdmVudExpc3RlbmVyKCdyZXN1bHQnLCAoZSkgPT4ge1xyXG4gICAgICBjb25zdCB0cmFuc2NyaXB0ID0gQXJyYXkuZnJvbShlLnJlc3VsdHMpXHJcbiAgICAgICAgIC5tYXAoKHJlc3VsdCkgPT4gcmVzdWx0WzBdKVxyXG4gICAgICAgICAubWFwKChyZXN1bHQpID0+IHJlc3VsdC50cmFuc2NyaXB0KVxyXG4gICAgICAgICAuam9pbignJyk7XHJcbiAgICAgIGlmIChpc01pY3JvKSB7XHJcbiAgICAgICAgIHNlYXJjaElucHV0LnZhbHVlID0gdHJhbnNjcmlwdDtcclxuICAgICAgfVxyXG4gICB9KTtcclxuXHJcbiAgIHJlY29nbml0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZCcsIHJlY29nbml0aW9uKTtcclxuXHJcblxyXG4gICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKCkgPT4ge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGVncmVlc0Zvcm1hdCcsIGRlZ3JlZXNGb3JtYXQpO1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFuZ3VhZ2UnLCBsYW5ndWFnZSk7XHJcbiAgIH0pO1xyXG59KCkpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9zY3JpcHRzL3NjcmlwdC5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ]);